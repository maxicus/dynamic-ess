[
    {
        "id": "6d2df96628e11781",
        "type": "group",
        "z": "56d0b82efbbcde18",
        "name": "Setpoint",
        "style": {
            "label": true
        },
        "nodes": [
            "28a187712f56df1e",
            "6e879a974c1b8360"
        ],
        "x": 24,
        "y": 219,
        "w": 592,
        "h": 82
    },
    {
        "id": "28a187712f56df1e",
        "type": "link in",
        "z": "56d0b82efbbcde18",
        "g": "6d2df96628e11781",
        "name": "setpoint",
        "links": [
            "ed154d46f4fecf6d"
        ],
        "x": 65,
        "y": 260,
        "wires": [
            [
                "6e879a974c1b8360"
            ]
        ]
    },
    {
        "id": "6e879a974c1b8360",
        "type": "victron-output-ess",
        "z": "56d0b82efbbcde18",
        "g": "6d2df96628e11781",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/AcPowerSetPoint",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "ESS System Settings",
            "paths": [
                {
                    "path": "/Settings/CGwacs/AcPowerSetPoint",
                    "type": "integer",
                    "name": "Grid set-point (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
                    "type": "integer",
                    "name": "Minimum Discharge SOC (%)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/State",
                    "type": "enum",
                    "name": "ESS state",
                    "enum": {
                        "1": "BatteryLife enabled (GUI controlled)",
                        "2": "Optimized Mode /w BatteryLife: self consumption",
                        "3": "Optimized Mode /w BatteryLife: self consumption, SoC exceeds 85%",
                        "4": "Optimized Mode /w BatteryLife: self consumption, SoC at 100%",
                        "5": "Optimized Mode /w BatteryLife: SoC below dynamic SoC limit",
                        "6": "Optimized Mode /w BatteryLife: SoC has been below SoC limit for more than 24 hours. Charging the battery (5A)",
                        "7": "Optimized Mode /w BatteryLife: Inverter/Charger is in sustain mode",
                        "8": "Optimized Mode /w BatteryLife: recharging, SoC dropped by 5% or more below the minimum SoC",
                        "9": "'Keep batteries charged' mode is enabled",
                        "10": "Optimized mode w/o BatteryLife: self consumption, SoC at or above minimum SoC",
                        "11": "Optimized mode w/o BatteryLife: self consumption, SoC is below minimum SoC",
                        "12": "Optimized mode w/o BatteryLife: recharging, SoC dropped by 5% or more below minimum SoC"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/Hub4Mode",
                    "type": "enum",
                    "name": "ESS mode",
                    "enum": {
                        "1": "Optimized mode or 'keep batteries charged' and phase compensation enabled",
                        "2": "Optimized mode or 'keep batteries charged' and phase compensation disabled",
                        "3": "External control"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxDischargePower",
                    "type": "integer",
                    "name": "Max inverter power (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxFeedInPower",
                    "type": "integer",
                    "name": "Maximum System Grid Feed In (W)",
                    "remarks": "<ul><li>-1: No limit</li><li> &gt;=0: limited system feed-in</li></ul><p>Applies to DC-coupled and AC-coupled feed-in.</p>",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/OvervoltageFeedIn",
                    "type": "enum",
                    "name": "Feed excess DC-coupled PV into grid",
                    "enum": {
                        "0": "Don’t feed excess DC-tied PV into grid",
                        "1": "Feed excess DC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/PreventFeedback",
                    "type": "enum",
                    "name": "Don’t feed excess AC-coupled PV into grid",
                    "enum": {
                        "0": "Feed excess AC-tied PV into grid",
                        "1": "Don’t feed excess AC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeCurrent",
                    "type": "float",
                    "name": "Charge current limit (A)",
                    "writable": true
                }
            ]
        },
        "pathObj": {
            "path": "/Settings/CGwacs/AcPowerSetPoint",
            "type": "integer",
            "name": "Grid set-point (W)",
            "writable": true
        },
        "initial": "",
        "name": "",
        "x": 430,
        "y": 260,
        "wires": []
    },
    {
        "id": "67b51999f76a26c5",
        "type": "group",
        "z": "56d0b82efbbcde18",
        "name": "Dynamic ESS",
        "style": {
            "label": true
        },
        "nodes": [
            "8d04135f6d27fecc",
            "ed154d46f4fecf6d",
            "8f5df8d850d18a73",
            "87bb924e1e97064c",
            "16f9951e5cfb6bc4",
            "90379381449d0a85"
        ],
        "x": 24,
        "y": 39,
        "w": 592,
        "h": 162
    },
    {
        "id": "8d04135f6d27fecc",
        "type": "inject",
        "z": "56d0b82efbbcde18",
        "g": "67b51999f76a26c5",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "90379381449d0a85"
            ]
        ]
    },
    {
        "id": "ed154d46f4fecf6d",
        "type": "link out",
        "z": "56d0b82efbbcde18",
        "g": "67b51999f76a26c5",
        "name": "setpoint",
        "mode": "link",
        "links": [
            "28a187712f56df1e"
        ],
        "x": 525,
        "y": 80,
        "wires": []
    },
    {
        "id": "8f5df8d850d18a73",
        "type": "link out",
        "z": "56d0b82efbbcde18",
        "g": "67b51999f76a26c5",
        "name": "graphing",
        "mode": "link",
        "links": [
            "b805402f793a2bb6",
            "a64ceca6d0094a52",
            "32c0fa1458112ab5",
            "4d573f8cc6d09808",
            "0d3598ae63cce673",
            "83140894628e8954",
            "3b6d7052cf70cecd",
            "45c38ee8490b8195",
            "87e176cd12c6bd8b",
            "25a614a1f05dc6e7",
            "47c35131a7b8a4b3"
        ],
        "x": 575,
        "y": 100,
        "wires": []
    },
    {
        "id": "87bb924e1e97064c",
        "type": "link out",
        "z": "56d0b82efbbcde18",
        "g": "67b51999f76a26c5",
        "name": "grid feed-in",
        "mode": "link",
        "links": [
            "7a080c2373e45b2f"
        ],
        "x": 575,
        "y": 140,
        "wires": []
    },
    {
        "id": "16f9951e5cfb6bc4",
        "type": "link out",
        "z": "56d0b82efbbcde18",
        "g": "67b51999f76a26c5",
        "name": "api info",
        "mode": "link",
        "links": [
            "f26b21993d6e0f75",
            "c50a15a7a345c90f"
        ],
        "x": 525,
        "y": 160,
        "wires": []
    },
    {
        "id": "90379381449d0a85",
        "type": "victron-dynamic-ess",
        "z": "56d0b82efbbcde18",
        "g": "67b51999f76a26c5",
        "name": "",
        "site_id": "",
        "vrmtoken": "",
        "country": "nl",
        "b_max": "10.0",
        "fb_max": "1.1",
        "tb_max": "1.2",
        "fg_max": "2",
        "tg_max": "2",
        "b_cost": "0.04",
        "buy_price_formula": "(p+0.02+0.13)*1.21",
        "sell_price_formula": "(p-0.02+0.13)*1.21",
        "feed_in_possible": true,
        "feed_in_control_on": true,
        "verbose": true,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "ed154d46f4fecf6d"
            ],
            [
                "8f5df8d850d18a73"
            ],
            [
                "87bb924e1e97064c"
            ],
            [
                "16f9951e5cfb6bc4"
            ]
        ]
    },
    {
        "id": "5e11b34b66b27db2",
        "type": "group",
        "z": "56d0b82efbbcde18",
        "name": "Idle battery",
        "style": {
            "label": true
        },
        "nodes": [
            "4d573f8cc6d09808",
            "6085b97cfd2d5a50",
            "c22714abeac34af2"
        ],
        "x": 24,
        "y": 419,
        "w": 592,
        "h": 82
    },
    {
        "id": "4d573f8cc6d09808",
        "type": "link in",
        "z": "56d0b82efbbcde18",
        "g": "5e11b34b66b27db2",
        "name": "link in 1",
        "links": [
            "8f5df8d850d18a73"
        ],
        "x": 65,
        "y": 460,
        "wires": [
            [
                "6085b97cfd2d5a50"
            ]
        ]
    },
    {
        "id": "6085b97cfd2d5a50",
        "type": "function",
        "z": "56d0b82efbbcde18",
        "g": "5e11b34b66b27db2",
        "name": "Battery control",
        "func": "const date = new Date()\n\nmsg.payload = Object.values(msg.payload.output.idle_b)[date.getHours()]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 460,
        "wires": [
            [
                "c22714abeac34af2"
            ]
        ]
    },
    {
        "id": "c22714abeac34af2",
        "type": "victron-idle-battery",
        "z": "56d0b82efbbcde18",
        "g": "5e11b34b66b27db2",
        "name": "",
        "x": 500,
        "y": 460,
        "wires": []
    },
    {
        "id": "fd2f9f76d88fad15",
        "type": "group",
        "z": "56d0b82efbbcde18",
        "name": "Grid feed-in",
        "style": {
            "label": true
        },
        "nodes": [
            "7a080c2373e45b2f",
            "d113883229f42347"
        ],
        "x": 24,
        "y": 319,
        "w": 592,
        "h": 82
    },
    {
        "id": "7a080c2373e45b2f",
        "type": "link in",
        "z": "56d0b82efbbcde18",
        "g": "fd2f9f76d88fad15",
        "name": "grid feed-in",
        "links": [
            "87bb924e1e97064c"
        ],
        "x": 65,
        "y": 360,
        "wires": [
            [
                "d113883229f42347"
            ]
        ]
    },
    {
        "id": "d113883229f42347",
        "type": "victron-output-ess",
        "z": "56d0b82efbbcde18",
        "g": "fd2f9f76d88fad15",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/PreventFeedback",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "ESS System Settings",
            "paths": [
                {
                    "path": "/Settings/CGwacs/AcPowerSetPoint",
                    "type": "integer",
                    "name": "Grid set-point (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
                    "type": "integer",
                    "name": "Minimum Discharge SOC (%)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/State",
                    "type": "enum",
                    "name": "ESS state",
                    "enum": {
                        "1": "BatteryLife enabled (GUI controlled)",
                        "2": "Optimized Mode /w BatteryLife: self consumption",
                        "3": "Optimized Mode /w BatteryLife: self consumption, SoC exceeds 85%",
                        "4": "Optimized Mode /w BatteryLife: self consumption, SoC at 100%",
                        "5": "Optimized Mode /w BatteryLife: SoC below dynamic SoC limit",
                        "6": "Optimized Mode /w BatteryLife: SoC has been below SoC limit for more than 24 hours. Charging the battery (5A)",
                        "7": "Optimized Mode /w BatteryLife: Inverter/Charger is in sustain mode",
                        "8": "Optimized Mode /w BatteryLife: recharging, SoC dropped by 5% or more below the minimum SoC",
                        "9": "'Keep batteries charged' mode is enabled",
                        "10": "Optimized mode w/o BatteryLife: self consumption, SoC at or above minimum SoC",
                        "11": "Optimized mode w/o BatteryLife: self consumption, SoC is below minimum SoC",
                        "12": "Optimized mode w/o BatteryLife: recharging, SoC dropped by 5% or more below minimum SoC"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/Hub4Mode",
                    "type": "enum",
                    "name": "ESS mode",
                    "enum": {
                        "1": "Optimized mode or 'keep batteries charged' and phase compensation enabled",
                        "2": "Optimized mode or 'keep batteries charged' and phase compensation disabled",
                        "3": "External control"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxDischargePower",
                    "type": "integer",
                    "name": "Max inverter power (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxFeedInPower",
                    "type": "integer",
                    "name": "Maximum System Grid Feed In (W)",
                    "remarks": "<ul><li>-1: No limit</li><li> &gt;=0: limited system feed-in</li></ul><p>Applies to DC-coupled and AC-coupled feed-in.</p>",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/OvervoltageFeedIn",
                    "type": "enum",
                    "name": "Feed excess DC-coupled PV into grid",
                    "enum": {
                        "0": "Don’t feed excess DC-tied PV into grid",
                        "1": "Feed excess DC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/PreventFeedback",
                    "type": "enum",
                    "name": "Don’t feed excess AC-coupled PV into grid",
                    "enum": {
                        "0": "Feed excess AC-tied PV into grid",
                        "1": "Don’t feed excess AC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeCurrent",
                    "type": "float",
                    "name": "Charge current limit (A)",
                    "writable": true
                }
            ]
        },
        "pathObj": {
            "path": "/Settings/CGwacs/PreventFeedback",
            "type": "enum",
            "name": "Don’t feed excess AC-coupled PV into grid",
            "enum": {
                "0": "Feed excess AC-tied PV into grid",
                "1": "Don’t feed excess AC-tied PV into the grid"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "x": 350,
        "y": 360,
        "wires": []
    },
    {
        "id": "a87ee310d8b6b3dd",
        "type": "group",
        "z": "56d0b82efbbcde18",
        "name": "Dashboard",
        "style": {
            "label": true
        },
        "nodes": [
            "dae32967fb93f303",
            "bf5d2e4d2e541144",
            "9517a8621cfebbc4",
            "528b0c24b2cb779d",
            "01aebdb76a08fc98",
            "3b6d7052cf70cecd",
            "4b79ce7ca152b505",
            "45c38ee8490b8195",
            "1da685ba246ae1f8",
            "0199da911d531fde",
            "47d88843433acb4b",
            "dbce8f53cdbde959",
            "a24234b13220fb35",
            "f26b21993d6e0f75",
            "968f6a7041a7d360",
            "7ba5c6b4793ca0b3"
        ],
        "x": 634,
        "y": 39,
        "w": 592,
        "h": 462
    },
    {
        "id": "dae32967fb93f303",
        "type": "ui_template",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "group": "ae94fc0e9881e8c0",
        "name": "Overview graph",
        "order": 3,
        "width": "12",
        "height": "6",
        "format": "<div>\n      <canvas id=\"estimations\" height=\"300px\"></canvas>\n</div>\n\n<script>\n    const estimationschart = new Chart(\n    document.getElementById('estimations'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Energy in kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Overview graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"\"\n            },\n            tooltip: {\n                callbacks: {\n                    label: function(context) {\n                        let label = context.dataset.label || \"\";\n                        if (label === 'Battery') {\n                            label += ': ';\n                            label += context.parsed.y\n                            label += ' ('\n                            label += d.B_max.toFixed(1)\n                            label += '%)'\n                        }\n                        return label;\n                    }\n                }\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n            estimationschart.config.options.title.text = d.title || ''\n            estimationschart.config.data.labels = d.labels\n            estimationschart.config.data.datasets = d.datasets\n            estimationschart.config.options.plugins.tooltip.callbacks.label = function(ctx) {\n                let label = ctx.dataset.label || \"\";\n                if (label === 'Battery') {\n                    label += ': ';\n                    label += ctx.parsed.y.toFixed(2)\n                    label += ' ('\n                    label += ((ctx.parsed.y / d.B_max) * 100).toFixed(1)\n                    label += '%)'\n                }\n                else {\n                    label += ': ' + ctx.parsed.y.toFixed(2)\n                }\n                return label;\n            }\n            estimationschart.update();\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1040,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "bf5d2e4d2e541144",
        "type": "ui_template",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "group": "ae94fc0e9881e8c0",
        "name": "Schedule graph",
        "order": 4,
        "width": "12",
        "height": "6",
        "format": "<div>\n  <canvas id=\"usage\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const usagechart = new Chart(\n    document.getElementById('usage'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Energy in kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Schedule graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"Positive values represent the energy used from the item (opposite for negatives).\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n\n            usagechart.config.options.title.text = d.title || ''\n            usagechart.config.data.labels = d.labels\n            usagechart.config.data.datasets = d.datasets\n            usagechart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1040,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "9517a8621cfebbc4",
        "type": "ui_template",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "group": "ae94fc0e9881e8c0",
        "name": "Price graph",
        "order": 5,
        "width": "12",
        "height": "6",
        "format": "<div>\n  <canvas id=\"dayaheadprices\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const dapchart = new Chart(\n    document.getElementById('dayaheadprices'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Price in €/kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Price graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"Buy & Sell prices take the provider fee, energy tax and VAT into account.\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n\n            dapchart.config.options.title.text = d.title || ''\n            dapchart.config.data.labels = d.labels\n            dapchart.config.data.datasets = d.datasets\n            dapchart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1030,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "528b0c24b2cb779d",
        "type": "ui_template",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "group": "ae94fc0e9881e8c0",
        "name": "Costs graph",
        "order": 6,
        "width": "12",
        "height": "6",
        "format": "<div>\n  <canvas id=\"usagecosts\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const ucchart = new Chart(\n    document.getElementById('usagecosts'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Cost in €\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Costs graph\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n\n            ucchart.config.options.title.text = d.title || ''\n            ucchart.config.data.labels = d.labels\n            ucchart.config.data.datasets = d.datasets\n            ucchart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1030,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "01aebdb76a08fc98",
        "type": "ui_template",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "group": "ae94fc0e9881e8c0",
        "name": "arbitraryLine plugin",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<script>\n  const arbitraryLine = {\n      id: 'arbitraryLine',\n      beforeDraw(chart, args, options){\n          const { \n              ctx, \n              chartArea: { top, right, bottom, left, width, height, margins}, \n              scales: {x, y}\n          } = chart;\n          ctx.save()\n          const d = new Date();\n          ctx.strokeStyle = options.nowBackgroundColor\n          ctx.fillStyle = options.nowBackgroundColor\n          let widthNow = (width / 24) * (d.getHours()+1)\n          ctx.fillRect(left, top, widthNow, height)\n          ctx.strokeStyle = options.pastBackgroundColor\n          ctx.fillStyle = options.pastBackgroundColor\n          let widthPast = (width / 24) * (d.getHours())\n          ctx.fillRect(left, top, widthPast, height)\n          ctx.restore()\n          \n      }\n  }\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 1050,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3b6d7052cf70cecd",
        "type": "link in",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "name": "graphing",
        "links": [
            "6704cb4025128d5e",
            "8f5df8d850d18a73"
        ],
        "x": 675,
        "y": 200,
        "wires": [
            [
                "a24234b13220fb35"
            ]
        ]
    },
    {
        "id": "4b79ce7ca152b505",
        "type": "ui_template",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "group": "ae94fc0e9881e8c0",
        "name": "Energy graph",
        "order": 7,
        "width": "24",
        "height": "6",
        "format": "<div>\n  <canvas id=\"energygraph\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const enchart = new Chart(\n    document.getElementById('energygraph'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true,\n          labels: {\n              filter: function(item, chart) {\n                return !item.text.includes(\"DISCARD\");\n              }\n          }\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Energy Graph\"\n            }\n        }\n    },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n            enchart.config.options.title.text = d.title || ''\n            enchart.config.data.labels = d.labels\n            enchart.config.data.datasets = d.datasets\n            enchart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1040,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "45c38ee8490b8195",
        "type": "link in",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "name": "graphing",
        "links": [
            "6704cb4025128d5e",
            "8f5df8d850d18a73"
        ],
        "x": 685,
        "y": 360,
        "wires": [
            [
                "1da685ba246ae1f8"
            ]
        ]
    },
    {
        "id": "1da685ba246ae1f8",
        "type": "function",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "name": "Control Outputs",
        "func": "const date = new Date()\n\nmsg.payload = {\n    'gs_min_max': Object.values(msg.payload.output.gsmm)[date.getHours()],\n    'feed_in_enabled': Object.values(msg.payload.output.feed_in)[date.getHours()],\n    'battery_is_idle': Object.values(msg.payload.output.idle_b)[date.getHours()]\n}\n\nswitch (msg.payload.gs_min_max) {\n    case 0: msg.payload.gs_min_max = 'Grid setpoint is 0'\n    break\n    case 1: msg.payload.gs_min_max = 'Grid setpoint is minimum (<i>-tg_max</i>)'\n    break\n    case 2: msg.payload.gs_min_max = 'Grid setpoint is maximum (<i>fg_max</i>)'\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 360,
        "wires": [
            [
                "0199da911d531fde",
                "47d88843433acb4b",
                "dbce8f53cdbde959"
            ]
        ]
    },
    {
        "id": "0199da911d531fde",
        "type": "ui_text",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "group": "1ae086bda8c1d796",
        "order": 2,
        "width": "8",
        "height": "2",
        "name": "",
        "label": "Set battery idle",
        "format": "{{msg.payload.battery_is_idle}}",
        "layout": "col-center",
        "className": "",
        "x": 1040,
        "y": 320,
        "wires": []
    },
    {
        "id": "47d88843433acb4b",
        "type": "ui_text",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "group": "1ae086bda8c1d796",
        "order": 1,
        "width": "8",
        "height": "2",
        "name": "",
        "label": "Grid setpoint (gs_min_max)",
        "format": "{{msg.payload.gs_min_max}}",
        "layout": "col-center",
        "className": "",
        "x": 1080,
        "y": 360,
        "wires": []
    },
    {
        "id": "dbce8f53cdbde959",
        "type": "ui_text",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "group": "1ae086bda8c1d796",
        "order": 3,
        "width": "8",
        "height": "2",
        "name": "",
        "label": "Enable Grid feed-in",
        "format": "{{msg.payload.feed_in_enabled}}",
        "layout": "col-center",
        "className": "",
        "x": 1050,
        "y": 400,
        "wires": []
    },
    {
        "id": "a24234b13220fb35",
        "type": "function",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "name": "Payload to graph",
        "func": "let overview = {\n    payload: {\n    \"datasets\": [\n        { label: 'Consumption',\n          type: 'line',\n          data: Object.values(msg.payload.output.C),\n          borderColor: \"#FA716F\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        },\n        { label: 'Battery',\n          type: 'line',\n          data: Object.values(msg.payload.output.B),\n          borderColor: \"#4790D0\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        },\n        { label: 'PV yield',\n          type: 'line',\n          data: Object.values(msg.payload.output.PV),\n          borderColor: \"#F7AB3E\",\n          backgroundColor: \"#f8aa3dAA\",\n          fill: true,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        }        \n        ],\n    \"labels\": Object.keys(msg.payload.schedule),\n    \"B_max\": msg.payload.options.B_max\n}}\n\nlet schedule = {\n    payload: {\n    \"datasets\": [\n        { label: \"Grid Usage\",\n          data: Object.values(msg.payload.output.g),\n          borderColor: \"#FA716F\",\n          backgroundColor: \"#FA716F\",\n          fill: true\n        },\n        { label: \"Battery usage\",\n          data: Object.values(msg.payload.output.b),\n          borderColor: \"#4790D0\",\n          backgroundColor: \"#4790D0\",\n          fill: true\n        }],\n    \"labels\": Object.keys(msg.payload.schedule)\n}}\n\nlet price = {\n    payload: {\n    \"datasets\": [\n        { label: \"Buy Price\",\n            type: 'line',\n          data: Object.values(msg.payload.output.p_b),\n          borderColor: \"#FA716F\",\n          backgroundColor: \"#FA716F\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        },{ label: \"Sell Price\",\n            type: 'line',\n          data: Object.values(msg.payload.output.p_s),\n          borderColor: \"#8BC964\",\n          backgroundColor: \"#8BC964\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        },],\n    \"labels\": Object.keys(msg.payload.schedule)\n}}\n\nlet costs = {\n    payload: {\n    \"datasets\": [\n        { label: \"Grid costs\",\n          data: Object.values(msg.payload.output.g_cost),\n          borderColor: \"#FA716F\",\n          backgroundColor: \"#FA716F\",\n          fill: true\n        },\n        { label: \"Battery costs\",\n          data: Object.values(msg.payload.output.b_cost),\n          borderColor: \"#4790D0\",\n          backgroundColor: \"#4790D0\",\n          fill: true\n        }],\n    \"labels\": Object.keys(msg.payload.schedule)\n}}\n\nb = Object.values(msg.payload.output.b);\ng = Object.values(msg.payload.output.g);\nC = Object.values(msg.payload.output.C);\nPV = Object.values(msg.payload.output.PV);\nn = C.map((c,i) => PV[i]-c);\n\nto_b = b.map(x => {if(x<0){return -x}else{return 0}});\nfrom_b = b.map(x => {if(x>0){return x}else{return 0}});\nto_g = g.map(x => {if(x<0){return -x}else{return 0}});\nfrom_g = g.map(x => {if(x>0){return x}else{return 0}});\n\nmet_need = C.map((c,i) => Math.min(c,PV[i]));\n\nfrom_g_to_b = []\nfrom_b_to_g = []\n\nfor (let i=0; i<=23; i++) {\n    if (Math.sign(b[i]) * Math.sign(g[i]) >= 0){\n        from_b_to_g.push(0)\n        from_g_to_b.push(0)\n    } else if ( Math.sign(b[i]) == 1 & Math.sign(n[i]) >= 0) {\n        from_b_to_g.push(b[i])\n        from_g_to_b.push(0)\n    } else if ( Math.sign(b[i]) == 1 & Math.sign(n[i]) == -1) {\n        from_b_to_g.push(-g[i])\n        from_g_to_b.push(0)\n    } else if ( Math.sign(g[i]) == 1 & Math.sign(n[i]) >= 0) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(g[i])\n    } else if ( Math.sign(g[i]) == 1 & Math.sign(n[i]) == -1) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(-b[i])\n    }\n}\n\nfrom_g = from_g.map((x,i) => x-from_g_to_b[i])\nfrom_b = from_b.map((x,i) => x-from_b_to_g[i])\nto_b = to_b.map((x,i) => x-from_g_to_b[i])\nto_g = to_g.map((x,i) => x-from_b_to_g[i])\n\nlet energy = {\n    payload: {\n    \"datasets\": [\n        { label: \"Consumption\",\n          type: 'line',\n          data: C,\n          borderColor: \"#1066B1\",\n          backgroundColor: \"#1066B1\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 0,\n          borderWidth: 1\n        },\n        { label: \"PV Yield\",\n          type: 'line',\n          data: PV,\n          borderColor: \"#F7AB3E\",\n          backgroundColor: \"#F7AB3E\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 0,\n          borderWidth: 1\n        },\n        { label: \"\",\n          type: 'bar',\n          data: met_need,\n          legend: false,\n          borderColor: \"#FFFFFF00\",\n          backgroundColor:\"#FFFFFF00\",\n          fill: true,\n          stack: 1,\n        },\n        { label: \"From Grid\",\n          type: 'bar',\n          data: from_g,\n          borderColor: \"#FA716F\",\n          backgroundColor:\"#FA716F\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"To Grid\",\n          type: 'bar',\n          data: to_g,\n          borderColor: \"#8BC964\",\n          backgroundColor:\"#8BC964\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"From Battery\",\n          type: 'bar',\n          data: from_b,\n          borderColor: \"#4790D0\",\n          backgroundColor:\"#4790D0\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"To Battery\",\n          type: 'bar',\n          data: to_b,\n          borderColor: \"#9683EC\",\n          backgroundColor:\"#9683EC\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"From Battery to Grid\",\n          type: 'bar',\n          data: from_b_to_g,\n          borderColor: \"#4790D0\",\n          backgroundColor:\"#8BC964\",\n          borderWidth: 4,\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"From Grid to Battery\",\n          type: 'bar',\n          data: from_g_to_b,\n          borderColor: \"#FA716F\",\n          borderWidth: 4,\n          backgroundColor:\"#9683EC\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },],\n    \"labels\": Object.keys(msg.payload.schedule)\n}}\n\nreturn [overview, schedule, price, costs, energy];",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 200,
        "wires": [
            [
                "dae32967fb93f303"
            ],
            [
                "bf5d2e4d2e541144"
            ],
            [
                "9517a8621cfebbc4"
            ],
            [
                "528b0c24b2cb779d"
            ],
            [
                "4b79ce7ca152b505"
            ]
        ]
    },
    {
        "id": "f26b21993d6e0f75",
        "type": "link in",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "name": "link in 2",
        "links": [
            "16f9951e5cfb6bc4"
        ],
        "x": 685,
        "y": 460,
        "wires": [
            [
                "968f6a7041a7d360"
            ]
        ]
    },
    {
        "id": "968f6a7041a7d360",
        "type": "function",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "name": "Informative text",
        "func": "let info = {\n    'topic': 'Note: Light gray background on the charts display the recorded values, while the transparent background shows the estimated/planned values. The darker gray part designates the current hour.'\n}\n\nif (msg.payload.status && msg.payload.status !== 500) {\n    info.topic = msg.payload.statusText\n}\n\nif (msg.payload.data && msg.payload.data.detail) {\n    info.payload = msg.payload.data.detail\n}\n\nreturn info",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 460,
        "wires": [
            [
                "7ba5c6b4793ca0b3"
            ]
        ]
    },
    {
        "id": "7ba5c6b4793ca0b3",
        "type": "ui_text",
        "z": "56d0b82efbbcde18",
        "g": "a87ee310d8b6b3dd",
        "group": "ae94fc0e9881e8c0",
        "order": 1,
        "width": "24",
        "height": "1",
        "name": "Informative Text",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 1040,
        "y": 460,
        "wires": []
    },
    {
        "id": "ae94fc0e9881e8c0",
        "type": "ui_group",
        "name": "Visualisations",
        "tab": "cc1a49b54f71c790",
        "order": 2,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1ae086bda8c1d796",
        "type": "ui_group",
        "name": "Control outputs",
        "tab": "cc1a49b54f71c790",
        "order": 3,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cc1a49b54f71c790",
        "type": "ui_tab",
        "name": "Dynamic ESS",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a60535f66374e712",
        "type": "group",
        "z": "56d0b82efbbcde18",
        "name": "Switch based on buy price",
        "style": {
            "label": true
        },
        "nodes": [
            "b45c543381a5e16d",
            "412b2c07c7b348fa",
            "245547e4591ab1c4",
            "0eb0fab6efa16cbe",
            "96db5372e1ad2e33",
            "47c35131a7b8a4b3",
            "be044ff4a19c5356",
            "ec1ff5f368ada517",
            "a18d4ec997818c0d",
            "c9e6618e4e39a9a9"
        ],
        "x": 24,
        "y": 519,
        "w": 1202,
        "h": 202
    },
    {
        "id": "b45c543381a5e16d",
        "type": "function",
        "z": "56d0b82efbbcde18",
        "g": "a60535f66374e712",
        "name": "Parse buy price info",
        "func": "const values = Object.values(msg.payload.output.p_b);\n\n// Calculate the sum of all values\nconst sum = values.reduce((acc, curr) => acc + curr, 0);\n\n// Calculate the average\nlet average_price = sum / values.length;\n\n// Prevent division by zero\nif (average_price === 0) { average_price = 0.000001; }\n\n// Add a flag to each object indicating above, below, or equal to average\nfor (const key in msg.payload.output.p_b) {\n    if (msg.payload.output.p_b.hasOwnProperty(key)) {\n        const value = msg.payload.output.p_b[key];\n        const flag = value > average_price ? \"above\" : value < average_price ? \"below\" : \"equal\";\n        const offset_perc = (value - average_price)/average_price;\n        msg.payload.output.p_b[key] = { value, flag, offset_perc };\n    }\n}\n\nconst d = new Date()\n\nmsg.payload.average_price = average_price\nmsg.payload.price_compared_to_average = msg.payload.output.p_b[d.getHours()].flag\nmsg.payload.price_offset_percentage = msg.payload.output.p_b[d.getHours()].offset_perc\nmsg.payload.negative_price = msg.payload.output.p_b[d.getHours()].value <= 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 580,
        "wires": [
            [
                "412b2c07c7b348fa",
                "be044ff4a19c5356"
            ]
        ]
    },
    {
        "id": "412b2c07c7b348fa",
        "type": "switch",
        "z": "56d0b82efbbcde18",
        "g": "a60535f66374e712",
        "name": "Compare average to current price",
        "property": "payload.price_compared_to_average",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "above",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "equal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "below",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 520,
        "y": 580,
        "wires": [
            [
                "0eb0fab6efa16cbe"
            ],
            [
                "0eb0fab6efa16cbe"
            ],
            [
                "96db5372e1ad2e33"
            ]
        ]
    },
    {
        "id": "245547e4591ab1c4",
        "type": "victron-output-relay",
        "z": "56d0b82efbbcde18",
        "g": "a60535f66374e712",
        "service": "com.victronenergy.system/0",
        "path": "/Relay/0/State",
        "serviceObj": {
            "service": "com.victronenergy.system/0",
            "name": "Venus device"
        },
        "pathObj": {
            "path": "/Relay/0/State",
            "type": "enum",
            "name": "Venus relay 1 state",
            "enum": {
                "0": "Open",
                "1": "Closed"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 1060,
        "y": 580,
        "wires": []
    },
    {
        "id": "0eb0fab6efa16cbe",
        "type": "change",
        "z": "56d0b82efbbcde18",
        "g": "a60535f66374e712",
        "name": "Open relay",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 560,
        "wires": [
            [
                "245547e4591ab1c4"
            ]
        ]
    },
    {
        "id": "96db5372e1ad2e33",
        "type": "change",
        "z": "56d0b82efbbcde18",
        "g": "a60535f66374e712",
        "name": "Close relay",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 600,
        "wires": [
            [
                "245547e4591ab1c4"
            ]
        ]
    },
    {
        "id": "47c35131a7b8a4b3",
        "type": "link in",
        "z": "56d0b82efbbcde18",
        "g": "a60535f66374e712",
        "name": "link in 22",
        "links": [
            "8f5df8d850d18a73"
        ],
        "x": 65,
        "y": 580,
        "wires": [
            [
                "b45c543381a5e16d"
            ]
        ]
    },
    {
        "id": "be044ff4a19c5356",
        "type": "switch",
        "z": "56d0b82efbbcde18",
        "g": "a60535f66374e712",
        "name": "Check for negative price",
        "property": "payload.negative_price",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 640,
        "wires": [
            [
                "ec1ff5f368ada517"
            ],
            [
                "a18d4ec997818c0d"
            ]
        ],
        "outputLabels": [
            "negative buy price",
            "positive buy price"
        ]
    },
    {
        "id": "ec1ff5f368ada517",
        "type": "change",
        "z": "56d0b82efbbcde18",
        "g": "a60535f66374e712",
        "name": "Open relay",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 640,
        "wires": [
            [
                "c9e6618e4e39a9a9"
            ]
        ]
    },
    {
        "id": "a18d4ec997818c0d",
        "type": "change",
        "z": "56d0b82efbbcde18",
        "g": "a60535f66374e712",
        "name": "Close relay",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 680,
        "wires": [
            [
                "c9e6618e4e39a9a9"
            ]
        ]
    },
    {
        "id": "c9e6618e4e39a9a9",
        "type": "victron-output-relay",
        "z": "56d0b82efbbcde18",
        "g": "a60535f66374e712",
        "service": "com.victronenergy.system/0",
        "path": "/Relay/1/State",
        "serviceObj": {
            "service": "com.victronenergy.system/0",
            "name": "Venus device"
        },
        "pathObj": {
            "path": "/Relay/1/State",
            "type": "enum",
            "name": "Venus relay 2 state",
            "enum": {
                "0": "Open",
                "1": "Closed"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "x": 1060,
        "y": 660,
        "wires": []
    }
]
