[
    {
        "id": "8e798fc93e6ce007",
        "type": "tab",
        "label": "Dynamic ESS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2bc4d1fc4d24f60a",
        "type": "group",
        "z": "8e798fc93e6ce007",
        "name": "Dynamic ESS",
        "style": {
            "label": true
        },
        "nodes": [
            "8eb59a68b5e00348",
            "c6368abea029ee34",
            "ca80e0785ece6488",
            "658f2b762da28ee8",
            "cb832a86e1f87095",
            "90e6c694f55f8ef4"
        ],
        "x": 774,
        "y": 299,
        "w": 352,
        "h": 182
    },
    {
        "id": "1e3ad614aeb2a547",
        "type": "group",
        "z": "8e798fc93e6ce007",
        "name": "Store battery capacity",
        "style": {
            "label": true
        },
        "nodes": [
            "688852d6c6d4e635",
            "ab9c666b334af3e1",
            "9580ec63e97c886f",
            "da28729197a836c4"
        ],
        "x": 34,
        "y": 979,
        "w": 1092,
        "h": 82
    },
    {
        "id": "dd46443f62f6ce6a",
        "type": "group",
        "z": "8e798fc93e6ce007",
        "name": "Schedule 0 - current hour",
        "style": {
            "label": true
        },
        "nodes": [
            "1d6fa900c0666142",
            "fb20423f20fb8073",
            "36f3c65014ac2767"
        ],
        "x": 34,
        "y": 669,
        "w": 532,
        "h": 142
    },
    {
        "id": "bdc7292479f50c4b",
        "type": "group",
        "z": "8e798fc93e6ce007",
        "name": "Schedule 1 - current hour +1",
        "style": {
            "label": true
        },
        "nodes": [
            "299e7521a89e07a3",
            "29e9185a3ef54c6a",
            "9072b4ed90c3d650"
        ],
        "x": 594,
        "y": 669,
        "w": 532,
        "h": 142
    },
    {
        "id": "744033bf8e3b9c25",
        "type": "group",
        "z": "8e798fc93e6ce007",
        "name": "Schedule 2 - current hour +2",
        "style": {
            "label": true
        },
        "nodes": [
            "4fead70ae91a5618",
            "71a40a88e2099e10",
            "7677870734c617e4"
        ],
        "x": 34,
        "y": 829,
        "w": 532,
        "h": 142
    },
    {
        "id": "8a7469b94424d902",
        "type": "group",
        "z": "8e798fc93e6ce007",
        "name": "Schedule 3 - current hour +3",
        "style": {
            "label": true
        },
        "nodes": [
            "e0d73a4f094a7fa6",
            "ce63201b4d3e2eaa",
            "163da36509915168"
        ],
        "x": 594,
        "y": 829,
        "w": 532,
        "h": 142
    },
    {
        "id": "c018435c26989974",
        "type": "group",
        "z": "8e798fc93e6ce007",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b2649c3356beac4c",
            "21a412f9205b4ad6",
            "9f355ad0aef74e42",
            "db2675c26af8189a",
            "255b1b39d82caf50",
            "4dd6775216cf749f"
        ],
        "x": 34,
        "y": 279,
        "w": 712,
        "h": 202
    },
    {
        "id": "59ccc632b3a9d67f",
        "type": "group",
        "z": "8e798fc93e6ce007",
        "name": "/dess page",
        "style": {
            "label": true
        },
        "nodes": [
            "5fe8e70158ab1263",
            "2307653f75d72f40",
            "44b84c57b6a068d8",
            "97432132d2b775d8",
            "378be4c009c1247b",
            "d34b91dbb56f20c0",
            "d3d40108b0f7473b",
            "1db0c79d3ba7ccc4",
            "94ed093be1ebc2cb",
            "f7b6663ee3daa093",
            "7897a058fdb517cc"
        ],
        "x": 34,
        "y": 499,
        "w": 1092,
        "h": 162
    },
    {
        "id": "8eb59a68b5e00348",
        "type": "link out",
        "z": "8e798fc93e6ce007",
        "g": "2bc4d1fc4d24f60a",
        "name": "schedule 0 - current hour",
        "mode": "link",
        "links": [
            "da28729197a836c4",
            "26cd7a96be6fca8a",
            "36f3c65014ac2767",
            "65c3d6ae85cd24fb"
        ],
        "x": 1035,
        "y": 360,
        "wires": []
    },
    {
        "id": "c6368abea029ee34",
        "type": "link out",
        "z": "8e798fc93e6ce007",
        "g": "2bc4d1fc4d24f60a",
        "name": "schedule 1 - current hour +1",
        "mode": "link",
        "links": [
            "7e361835e40e9612",
            "9072b4ed90c3d650"
        ],
        "x": 1085,
        "y": 380,
        "wires": []
    },
    {
        "id": "ca80e0785ece6488",
        "type": "link out",
        "z": "8e798fc93e6ce007",
        "g": "2bc4d1fc4d24f60a",
        "name": "schedule 2 - current hour +2",
        "mode": "link",
        "links": [
            "85d9b1f2d1083440",
            "74763e443d37e052",
            "7677870734c617e4"
        ],
        "x": 1035,
        "y": 420,
        "wires": []
    },
    {
        "id": "658f2b762da28ee8",
        "type": "link out",
        "z": "8e798fc93e6ce007",
        "g": "2bc4d1fc4d24f60a",
        "name": "schedule 3 - current hour +3",
        "mode": "link",
        "links": [
            "67ab1cc124f6edbc",
            "863d6709efb19cba",
            "163da36509915168"
        ],
        "x": 1085,
        "y": 440,
        "wires": []
    },
    {
        "id": "cb832a86e1f87095",
        "type": "inject",
        "z": "8e798fc93e6ce007",
        "g": "2bc4d1fc4d24f60a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 890,
        "y": 340,
        "wires": [
            [
                "90e6c694f55f8ef4"
            ]
        ]
    },
    {
        "id": "90e6c694f55f8ef4",
        "type": "victron-dynamic-ess",
        "z": "8e798fc93e6ce007",
        "g": "2bc4d1fc4d24f60a",
        "name": "",
        "vrm_id": "",
        "vrmtoken": "",
        "country": "nl",
        "contract_buy": "",
        "contract_sell": "",
        "b_max": "14",
        "fb_max": "6.5",
        "tb_max": "4.5",
        "fg_max": "2.5",
        "tg_max": "2.5",
        "b_cycle_cost": "0.01",
        "buy_price_formula": "(p+0.03+0.13)*1.21",
        "sell_price_formula": "(p-0.03+0.13)*1.21",
        "green_mode_on": true,
        "b_goal_hour": 0,
        "b_goal_SOC": 0,
        "feed_in_possible": true,
        "feed_in_control_on": true,
        "verbose": true,
        "x": 900,
        "y": 420,
        "wires": [
            [
                "8eb59a68b5e00348"
            ],
            [
                "c6368abea029ee34"
            ],
            [
                "ca80e0785ece6488"
            ],
            [
                "658f2b762da28ee8"
            ]
        ]
    },
    {
        "id": "688852d6c6d4e635",
        "type": "change",
        "z": "8e798fc93e6ce007",
        "g": "1e3ad614aeb2a547",
        "name": "battery capacity",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "dess.options.b_max",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 1020,
        "wires": [
            [
                "9580ec63e97c886f"
            ]
        ]
    },
    {
        "id": "ab9c666b334af3e1",
        "type": "victron-output-custom",
        "z": "8e798fc93e6ce007",
        "g": "1e3ad614aeb2a547",
        "service": "com.victronenergy.settings",
        "path": "/Settings/DynamicEss/BatteryCapacity",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "com.victronenergy.settings"
        },
        "pathObj": {
            "path": "/Settings/DynamicEss/BatteryCapacity",
            "name": "/Settings/DynamicEss/BatteryCapacity",
            "type": "number"
        },
        "name": "",
        "onlyChanges": false,
        "x": 860,
        "y": 1020,
        "wires": []
    },
    {
        "id": "9580ec63e97c886f",
        "type": "change",
        "z": "8e798fc93e6ce007",
        "g": "1e3ad614aeb2a547",
        "name": "to number",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$number(payload)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 1020,
        "wires": [
            [
                "ab9c666b334af3e1"
            ]
        ]
    },
    {
        "id": "da28729197a836c4",
        "type": "link in",
        "z": "8e798fc93e6ce007",
        "g": "1e3ad614aeb2a547",
        "name": "link in 1",
        "links": [
            "8eb59a68b5e00348"
        ],
        "x": 75,
        "y": 1020,
        "wires": [
            [
                "688852d6c6d4e635"
            ]
        ]
    },
    {
        "id": "1d6fa900c0666142",
        "type": "function",
        "z": "8e798fc93e6ce007",
        "g": "dd46443f62f6ce6a",
        "name": "split schedule 0",
        "func": "node.status({ fill: 'green', shape: 'dot', text: new Date(msg.start*1000).toLocaleString() })\n\nreturn [\n    {\n        path: '/Settings/DynamicEss/Schedule/0/Soc',\n        payload: msg.soc\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/0/AllowGridFeedIn',\n        payload: msg.feed_in\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/0/Start',\n        payload: msg.start\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/0/Duration',\n        payload: msg.duration\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/0/Restrictions',\n        payload: msg.restrictions\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/0/Strategy',\n        payload: msg.strategy\n    }\n];",
        "outputs": 6,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 740,
        "wires": [
            [
                "fb20423f20fb8073"
            ],
            [
                "fb20423f20fb8073"
            ],
            [
                "fb20423f20fb8073"
            ],
            [
                "fb20423f20fb8073"
            ],
            [
                "fb20423f20fb8073"
            ],
            [
                "fb20423f20fb8073"
            ]
        ]
    },
    {
        "id": "fb20423f20fb8073",
        "type": "victron-output-custom",
        "z": "8e798fc93e6ce007",
        "g": "dd46443f62f6ce6a",
        "service": "com.victronenergy.settings",
        "path": "/Settings/DynamicEss/Schedule/0/Soc",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "com.victronenergy.settings"
        },
        "pathObj": {
            "path": "/Settings/DynamicEss/Schedule/0/Soc",
            "name": "/Settings/DynamicEss/Schedule/0/Soc",
            "type": "number"
        },
        "name": "Schedule 0",
        "onlyChanges": false,
        "x": 470,
        "y": 740,
        "wires": []
    },
    {
        "id": "36f3c65014ac2767",
        "type": "link in",
        "z": "8e798fc93e6ce007",
        "g": "dd46443f62f6ce6a",
        "name": "schedule 0 - current hour",
        "links": [
            "8eb59a68b5e00348"
        ],
        "x": 75,
        "y": 740,
        "wires": [
            [
                "1d6fa900c0666142"
            ]
        ]
    },
    {
        "id": "299e7521a89e07a3",
        "type": "function",
        "z": "8e798fc93e6ce007",
        "g": "bdc7292479f50c4b",
        "name": "split schedule 1",
        "func": "node.status({ fill: 'green', shape: 'dot', text: new Date(msg.start*1000).toLocaleString() })\n\nreturn [\n    {\n        path: '/Settings/DynamicEss/Schedule/1/Soc',\n        payload: msg.soc\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/1/AllowGridFeedIn',\n        payload: msg.feed_in\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/1/Start',\n        payload: msg.start\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/1/Duration',\n        payload: msg.duration\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/1/Restrictions',\n        payload: msg.restrictions\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/1/Strategy',\n        payload: msg.strategy\n    }\n];",
        "outputs": 6,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 740,
        "wires": [
            [
                "29e9185a3ef54c6a"
            ],
            [
                "29e9185a3ef54c6a"
            ],
            [
                "29e9185a3ef54c6a"
            ],
            [
                "29e9185a3ef54c6a"
            ],
            [
                "29e9185a3ef54c6a"
            ],
            [
                "29e9185a3ef54c6a"
            ]
        ]
    },
    {
        "id": "29e9185a3ef54c6a",
        "type": "victron-output-custom",
        "z": "8e798fc93e6ce007",
        "g": "bdc7292479f50c4b",
        "service": "com.victronenergy.settings",
        "path": "/Settings/DynamicEss/Schedule/0/Soc",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "com.victronenergy.settings"
        },
        "pathObj": {
            "path": "/Settings/DynamicEss/Schedule/0/Soc",
            "name": "/Settings/DynamicEss/Schedule/0/Soc",
            "type": "number"
        },
        "name": "Schedule 1",
        "onlyChanges": false,
        "x": 1030,
        "y": 740,
        "wires": []
    },
    {
        "id": "9072b4ed90c3d650",
        "type": "link in",
        "z": "8e798fc93e6ce007",
        "g": "bdc7292479f50c4b",
        "name": "schedule 0 - current hour",
        "links": [
            "c6368abea029ee34"
        ],
        "x": 635,
        "y": 740,
        "wires": [
            [
                "299e7521a89e07a3"
            ]
        ]
    },
    {
        "id": "4fead70ae91a5618",
        "type": "function",
        "z": "8e798fc93e6ce007",
        "g": "744033bf8e3b9c25",
        "name": "split schedule 2",
        "func": "node.status({ fill: 'green', shape: 'dot', text: new Date(msg.start*1000).toLocaleString() })\n\nreturn [\n    {\n        path: '/Settings/DynamicEss/Schedule/2/Soc',\n        payload: msg.soc\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/2/AllowGridFeedIn',\n        payload: msg.feed_in\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/2/Start',\n        payload: msg.start\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/2/Duration',\n        payload: msg.duration\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/2/Restrictions',\n        payload: msg.restrictions\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/2/Strategy',\n        payload: msg.strategy\n    }\n];",
        "outputs": 6,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 900,
        "wires": [
            [
                "71a40a88e2099e10"
            ],
            [
                "71a40a88e2099e10"
            ],
            [
                "71a40a88e2099e10"
            ],
            [
                "71a40a88e2099e10"
            ],
            [
                "71a40a88e2099e10"
            ],
            [
                "71a40a88e2099e10"
            ]
        ]
    },
    {
        "id": "71a40a88e2099e10",
        "type": "victron-output-custom",
        "z": "8e798fc93e6ce007",
        "g": "744033bf8e3b9c25",
        "service": "com.victronenergy.settings",
        "path": "/Settings/DynamicEss/Schedule/0/Soc",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "com.victronenergy.settings"
        },
        "pathObj": {
            "path": "/Settings/DynamicEss/Schedule/0/Soc",
            "name": "/Settings/DynamicEss/Schedule/0/Soc",
            "type": "number"
        },
        "name": "Schedule 2",
        "onlyChanges": false,
        "x": 470,
        "y": 900,
        "wires": []
    },
    {
        "id": "7677870734c617e4",
        "type": "link in",
        "z": "8e798fc93e6ce007",
        "g": "744033bf8e3b9c25",
        "name": "schedule 0 - current hour",
        "links": [
            "ca80e0785ece6488"
        ],
        "x": 75,
        "y": 900,
        "wires": [
            [
                "4fead70ae91a5618"
            ]
        ]
    },
    {
        "id": "e0d73a4f094a7fa6",
        "type": "function",
        "z": "8e798fc93e6ce007",
        "g": "8a7469b94424d902",
        "name": "split schedule 3",
        "func": "node.status({ fill: 'green', shape: 'dot', text: new Date(msg.start*1000).toLocaleString() })\n\nreturn [\n    {\n        path: '/Settings/DynamicEss/Schedule/3/Soc',\n        payload: msg.soc\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/3/AllowGridFeedIn',\n        payload: msg.feed_in\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/3/Start',\n        payload: msg.start\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/3/Duration',\n        payload: msg.duration\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/3/Restrictions',\n        payload: msg.restrictions\n    },\n    {\n        path: '/Settings/DynamicEss/Schedule/3/Strategy',\n        payload: msg.strategy\n    }\n];",
        "outputs": 6,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 900,
        "wires": [
            [
                "ce63201b4d3e2eaa"
            ],
            [
                "ce63201b4d3e2eaa"
            ],
            [
                "ce63201b4d3e2eaa"
            ],
            [
                "ce63201b4d3e2eaa"
            ],
            [
                "ce63201b4d3e2eaa"
            ],
            [
                "ce63201b4d3e2eaa"
            ]
        ]
    },
    {
        "id": "ce63201b4d3e2eaa",
        "type": "victron-output-custom",
        "z": "8e798fc93e6ce007",
        "g": "8a7469b94424d902",
        "service": "com.victronenergy.settings",
        "path": "/Settings/DynamicEss/Schedule/0/Soc",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "com.victronenergy.settings"
        },
        "pathObj": {
            "path": "/Settings/DynamicEss/Schedule/0/Soc",
            "name": "/Settings/DynamicEss/Schedule/0/Soc",
            "type": "number"
        },
        "name": "Schedule 3",
        "onlyChanges": false,
        "x": 1030,
        "y": 900,
        "wires": []
    },
    {
        "id": "163da36509915168",
        "type": "link in",
        "z": "8e798fc93e6ce007",
        "g": "8a7469b94424d902",
        "name": "schedule 0 - current hour",
        "links": [
            "658f2b762da28ee8"
        ],
        "x": 635,
        "y": 900,
        "wires": [
            [
                "e0d73a4f094a7fa6"
            ]
        ]
    },
    {
        "id": "b2649c3356beac4c",
        "type": "inject",
        "z": "8e798fc93e6ce007",
        "g": "c018435c26989974",
        "name": "Disable Dynamic ESS (mode: auto)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 220,
        "y": 360,
        "wires": [
            [
                "9f355ad0aef74e42"
            ]
        ]
    },
    {
        "id": "21a412f9205b4ad6",
        "type": "inject",
        "z": "8e798fc93e6ce007",
        "g": "c018435c26989974",
        "name": "Disable Dynamic ESS (mode: off)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 210,
        "y": 400,
        "wires": [
            [
                "9f355ad0aef74e42"
            ]
        ]
    },
    {
        "id": "9f355ad0aef74e42",
        "type": "victron-output-custom",
        "z": "8e798fc93e6ce007",
        "g": "c018435c26989974",
        "service": "com.victronenergy.settings",
        "path": "/Settings/DynamicEss/Mode",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "com.victronenergy.settings"
        },
        "pathObj": {
            "path": "/Settings/DynamicEss/Mode",
            "name": "/Settings/DynamicEss/Mode",
            "type": "number"
        },
        "name": "Dynamic ESS mode",
        "onlyChanges": false,
        "x": 620,
        "y": 360,
        "wires": []
    },
    {
        "id": "db2675c26af8189a",
        "type": "inject",
        "z": "8e798fc93e6ce007",
        "g": "c018435c26989974",
        "name": "Enable Dynamic ESS (mode: Node-RED)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "num",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "9f355ad0aef74e42"
            ]
        ]
    },
    {
        "id": "255b1b39d82caf50",
        "type": "victron-input-custom",
        "z": "8e798fc93e6ce007",
        "g": "c018435c26989974",
        "service": "com.victronenergy.settings",
        "path": "/Settings/DynamicEss/Mode",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "com.victronenergy.settings"
        },
        "pathObj": {
            "path": "/Settings/DynamicEss/Mode",
            "name": "/Settings/DynamicEss/Mode",
            "type": "number"
        },
        "name": "",
        "onlyChanges": true,
        "x": 270,
        "y": 440,
        "wires": [
            [
                "4dd6775216cf749f"
            ]
        ]
    },
    {
        "id": "4dd6775216cf749f",
        "type": "change",
        "z": "8e798fc93e6ce007",
        "g": "c018435c26989974",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "dess_mode",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "5fe8e70158ab1263",
        "type": "http in",
        "z": "8e798fc93e6ce007",
        "g": "59ccc632b3a9d67f",
        "name": "Dynamic ESS (/dess)",
        "url": "/dess",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 540,
        "wires": [
            [
                "1db0c79d3ba7ccc4"
            ]
        ]
    },
    {
        "id": "2307653f75d72f40",
        "type": "http in",
        "z": "8e798fc93e6ce007",
        "g": "59ccc632b3a9d67f",
        "name": "Stylesheet DESS",
        "url": "/dess/style.css",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "44b84c57b6a068d8"
            ]
        ]
    },
    {
        "id": "44b84c57b6a068d8",
        "type": "template",
        "z": "8e798fc93e6ce007",
        "g": "59ccc632b3a9d67f",
        "name": "stylesheet",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "body {\n  background-color: #fff;\n  padding-left: 5%;\n  padding-right: 5%;\n  font-family: Tahoma, Verdana, Arial, sans-serif;\n}\nh1 {\n  color: white;\n}\np {\n  color: black;\n}\n\n.dess-table {\n    border-collapse: collapse;\n    margin: 25px 0;\n    font-size: 0.9em;\n    font-family: sans-serif;\n    min-width: 400px;\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);\n}\n\n.dess-table thead tr {\n    background-color: #009879;\n    color: #ffffff;\n    text-align: left;\n}\n\n.dess-table th,\n.dess-table td {\n    padding: 12px 15px;\n}",
        "output": "str",
        "x": 540,
        "y": 620,
        "wires": [
            [
                "97432132d2b775d8"
            ]
        ]
    },
    {
        "id": "97432132d2b775d8",
        "type": "change",
        "z": "8e798fc93e6ce007",
        "g": "59ccc632b3a9d67f",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/css",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 620,
        "wires": [
            [
                "d3d40108b0f7473b"
            ]
        ]
    },
    {
        "id": "378be4c009c1247b",
        "type": "http in",
        "z": "8e798fc93e6ce007",
        "g": "59ccc632b3a9d67f",
        "name": "Javascript DESS",
        "url": "/dess/index.js",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "f7b6663ee3daa093"
            ]
        ]
    },
    {
        "id": "d34b91dbb56f20c0",
        "type": "change",
        "z": "8e798fc93e6ce007",
        "g": "59ccc632b3a9d67f",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/javascript",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 580,
        "wires": [
            [
                "d3d40108b0f7473b"
            ]
        ]
    },
    {
        "id": "d3d40108b0f7473b",
        "type": "http response",
        "z": "8e798fc93e6ce007",
        "g": "59ccc632b3a9d67f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 580,
        "wires": []
    },
    {
        "id": "1db0c79d3ba7ccc4",
        "type": "function",
        "z": "8e798fc93e6ce007",
        "g": "59ccc632b3a9d67f",
        "name": "prepare dess variables",
        "func": "let dess = flow.get('dess')     \n\nmsg.lastValidUpdate = new Date(flow.get('lastValidUpdate')).toLocaleString()\nlet date = new Date()\nmsg.hour = date.getHours()\n// msg.gsmm = dess.output.gsmm[msg.hour]\n// msg.feed_in = dess.output.feed_in[msg.hour]\n// msg.idle_b = dess.output.idle_b[msg.hour]\n\nmsg.dess_mode = flow.get('dess_mode')\nmsg.dess_mode_text = ['Off', 'Auto', 'Buy', 'Sell', 'Node-RED'][msg.dess_mode]\nmsg.dess_hours = Object.keys(dess.schedule).length || 0\nmsg.is_half_hour_schedule = dess.is_half_hour_schedule || false\n\nmsg.estimations = {\n    payload: {\n        \"datasets\": [\n            {\n                label: 'Consumption',\n                type: 'line',\n                data: Object.values(dess.output.C).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#FA716F\",\n                fill: false,\n                stepped: 'left',\n                pointRadius: 1,\n                borderWidth: 1\n            },\n            {\n                label: 'Battery',\n                type: 'line',\n                data: Object.values(dess.output.B).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#4790D0\",\n                fill: false,\n                stepped: 'left',\n                pointRadius: 1,\n                borderWidth: 1\n            },\n            {\n                label: 'PV yield',\n                type: 'line',\n                data: Object.values(dess.output.PV).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#F7AB3E\",\n                backgroundColor: \"#f8aa3dAA\",\n                fill: true,\n                stepped: 'left',\n                pointRadius: 1,\n                borderWidth: 1\n            }\n        ],\n        \"labels\": Object.values(dess.output.timestamps).slice(0, msg.dess_hours).map((x) =>{\n            date = new Date(x)\n            if(date.getHours() == 0){\n                return x.split('+')[0].replace('T',' ')\n            }\n            else{\n                return x.split('+')[0].split('T')[1]\n            }\n        }),\n        \"B_max\": dess.options.b_max\n    }\n}\n\nmsg.schedule = {\n    payload: {\n        \"datasets\": [\n            {\n                label: \"Grid Usage\",\n                data: Object.values(dess.output.g).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#FA716F\",\n                backgroundColor: \"#FA716F\",\n                fill: true\n            },\n            {\n                label: \"Battery usage\",\n                data: Object.values(dess.output.b).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#4790D0\",\n                backgroundColor: \"#4790D0\",\n                fill: true\n            }],\n        \"labels\": Object.values(dess.output.timestamps).slice(0, msg.dess_hours).map((x) =>{\n            date = new Date(x)\n            if(date.getHours() == 0){\n                return x.split('+')[0].replace('T',' ')\n            }\n            else{\n                return x.split('+')[0].split('T')[1]\n            }\n        }),\n    }\n}\n\nmsg.dayaheadprices = {\n    payload: {\n        \"datasets\": [\n            {\n                label: \"Buy Price\",\n                type: 'line',\n                data: Object.values(dess.output.p_b).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#FA716F\",\n                backgroundColor: \"#FA716F\",\n                fill: false,\n                stepped: 'left',\n                pointRadius: 1,\n                borderWidth: 1\n            }, {\n                label: \"Sell Price\",\n                type: 'line',\n                data: Object.values(dess.output.p_s).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#8BC964\",\n                backgroundColor: \"#8BC964\",\n                fill: false,\n                stepped: 'left',\n                pointRadius: 1,\n                borderWidth: 1\n            },],\n        \"labels\": Object.values(dess.output.timestamps).slice(0, msg.dess_hours).map((x) =>{\n            date = new Date(x)\n            if(date.getHours() == 0){\n                return x.split('+')[0].replace('T',' ')\n            }\n            else{\n                return x.split('+')[0].split('T')[1]\n            }\n        }),\n    }\n}\n\nmsg.costs = {\n    payload: {\n        \"datasets\": [\n            {\n                label: \"Grid costs\",\n                data: Object.values(dess.output.g_cost).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#FA716F\",\n                backgroundColor: \"#FA716F\",\n                fill: true\n            },\n            {\n                label: \"Battery costs\",\n                data: Object.values(dess.output.b_cost).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#4790D0\",\n                backgroundColor: \"#4790D0\",\n                fill: true\n            }],\n        \"labels\": Object.values(dess.output.timestamps).slice(0, msg.dess_hours).map((x) =>{\n            date = new Date(x)\n            if(date.getHours() == 0){\n                return x.split('+')[0].replace('T',' ')\n            }\n            else{\n                return x.split('+')[0].split('T')[1]\n            }\n        }),\n    }\n}\n\nlet b = Object.values(dess.output.b).slice(0, msg.dess_hours).map(x => x.toFixed(3));\nlet g = Object.values(dess.output.g).slice(0, msg.dess_hours).map(x => x.toFixed(3));\nlet C = Object.values(dess.output.C).slice(0, msg.dess_hours).map(x => x.toFixed(3));\nlet PV = Object.values(dess.output.PV).slice(0, msg.dess_hours).map(x => x.toFixed(3));\nlet n = C.map((c, i) => PV[i] - c);\n\nlet to_b = b.map(x => { if (x < 0) { return -x } else { return 0 } });\nlet from_b = b.map(x => { if (x > 0) { return x } else { return 0 } });\nlet to_g = g.map(x => { if (x < 0) { return -x } else { return 0 } });\nlet from_g = g.map(x => { if (x > 0) { return x } else { return 0 } });\n\nlet met_need = C.map((c, i) => Math.min(c, PV[i]));\n\nlet from_g_to_b = []\nlet from_b_to_g = []\n\nfor (let i = 0; i <= (msg.dess_hours - 1); i++) {\n    if (Math.sign(b[i]) * Math.sign(g[i]) >= 0) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(0)\n    } else if (Math.sign(b[i]) == 1 && Math.sign(n[i]) >= 0) {\n        from_b_to_g.push(b[i])\n        from_g_to_b.push(0)\n    } else if (Math.sign(b[i]) == 1 && Math.sign(n[i]) == -1) {\n        from_b_to_g.push(-g[i])\n        from_g_to_b.push(0)\n    } else if (Math.sign(g[i]) == 1 && Math.sign(n[i]) >= 0) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(g[i])\n    } else if (Math.sign(g[i]) == 1 && Math.sign(n[i]) == -1) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(-b[i])\n    }\n}\n\nfrom_g = from_g.map((x, i) => (x - from_g_to_b[i]).toFixed(3))\nfrom_b = from_b.map((x, i) => (x - from_b_to_g[i]).toFixed(3))\nto_b = to_b.map((x, i) => (x - from_g_to_b[i]).toFixed(3))\nto_g = to_g.map((x, i) => (x - from_b_to_g[i]).toFixed(3))\n\nmsg.energy = {\n    payload: {\n        \"datasets\": [\n            {\n                label: \"Consumption\",\n                type: 'line',\n                data: C,\n                borderColor: \"#1066B1\",\n                backgroundColor: \"#1066B1\",\n                fill: false,\n                stepped: 'middle',\n                borderWidth: 1\n            },\n            {\n                label: \"PV Yield\",\n                type: 'line',\n                data: PV,\n                borderColor: \"#F7AB3E\",\n                backgroundColor: \"#F7AB3E\",\n                fill: false,\n                stepped: 'middle',\n                borderWidth: 1\n            },\n            {\n                label: \"\",\n                type: 'bar',\n                data: met_need,\n                legend: false,\n                borderColor: \"#FFFFFF00\",\n                backgroundColor: \"#FFFFFF00\",\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"From Grid\",\n                type: 'bar',\n                data: from_g,\n                borderColor: \"#FA716F\",\n                backgroundColor: \"#FA716F\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"To Grid\",\n                type: 'bar',\n                data: to_g,\n                borderColor: \"#8BC964\",\n                backgroundColor: \"#8BC964\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"From Battery\",\n                type: 'bar',\n                data: from_b,\n                borderColor: \"#4790D0\",\n                backgroundColor: \"#4790D0\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"To Battery\",\n                type: 'bar',\n                data: to_b,\n                borderColor: \"#9683EC\",\n                backgroundColor: \"#9683EC\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"From Battery to Grid\",\n                type: 'bar',\n                data: from_b_to_g,\n                borderColor: \"#4790D0\",\n                backgroundColor: \"#8BC964\",\n                borderWidth: 4,\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"From Grid to Battery\",\n                type: 'bar',\n                data: from_g_to_b,\n                borderColor: \"#FA716F\",\n                borderWidth: 4,\n                backgroundColor: \"#9683EC\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },],\n        \"labels\": Object.values(dess.output.timestamps).slice(0, msg.dess_hours).map((x) =>{\n            date = new Date(x)\n            if(date.getHours() == 0){\n                return x.split('+')[0].replace('T',' ')\n            }\n            else{\n                return x.split('+')[0].split('T')[1]\n            }\n        }),\n    }\n}\n\nmsg.table = []\nmsg.timestamps =Object.values(dess.output.timestamps).slice(0, msg.dess_hours)\nconst currentDateTime = new Date()\ncurrentDateTime.setMinutes(0, 0, 0)\nconst unixTimestamp = Math.floor(currentDateTime.getTime() / 1000)\nlet currentHour = currentDateTime.getHours()\nfor (let schedule = 0; schedule <= 3; schedule++) {\n    let schedulePick = currentHour + schedule\n    if (schedulePick > Object.keys(dess.schedule).length) {\n        schedulePick -= 24\n    }\n    let scheduledDate = currentDateTime;\n    scheduledDate.setHours(currentHour + schedule)\n    msg.table.push({\n        soc: Number((dess.output.SOC[schedulePick]).toFixed(1)),\n        // feed_in: dess.output.feed_in[schedulePick],\n        duration: 3600,\n        start: scheduledDate.toLocaleString()\n\n    })\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 540,
        "wires": [
            [
                "94ed093be1ebc2cb"
            ]
        ]
    },
    {
        "id": "94ed093be1ebc2cb",
        "type": "template",
        "z": "8e798fc93e6ce007",
        "g": "59ccc632b3a9d67f",
        "name": "html page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"refresh\" content=\"60\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Dynamic ESS</title>\n        <link rel=\"stylesheet\" href=\"/dess/style.css\">\n  </head>\n  <body>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script src=\"/dess/index.js\"></script>\n  \n  <h2>Dynamic ESS - {{ flow.dess.options.vrm_id }} ({{ flow.dess.options.country }}) - {{ dess_mode_text }}</h2>\n\n<div class=\"canvas-container\">\n  <div class=\"canvas-pair\">\n    <div id=\"ca\" style=\"height: 45vh; width: 45%;display:inline-block;\">\n      <canvas id=\"estimations\"></canvas>\n    </div>\n\n    <div id=\"cb\" style=\"height: 45vh; width: 45%;margin-left:5%;display:inline-block;\">\n      <canvas id=\"schedule\"></canvas>\n    </div>\n  </div>\n  <div class=\"canvas-pair\">\n    <div id=\"cc\" style=\"height: 45vh; width: 45%;display:inline-block;\">\n      <canvas id=\"dayaheadprices\"></canvas>\n    </div>\n\n    <div id=\"cd\" style=\"height: 45vh; width: 45%;margin-left:5%;display:inline-block;\">\n      <canvas id=\"costs\"></canvas>\n    </div>\n  </div>\n</div>\n\n<div id=\"ce\" style=\"height: 45vh;\">\n  <canvas id=\"energy\"></canvas>\n</div>\n\n<script>\n    const estimationschart = new Chart(\n    document.getElementById('estimations'),\n      {\n        type: 'bar',\n      data: {\n        labels: [{{#estimations.payload.labels}}\"{{.}}\",{{/estimations.payload.labels}}],\n        datasets: [\n            {{#estimations.payload.datasets}}\n            {\n                label: '{{label}}',\n                type: '{{type}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                {{#backgroundColor}}\n                backgroundColor: '{{backgroundColor}}',\n                {{/backgroundColor}}\n                fill: {{fill}},\n                stepped: '{{stepped}}',\n                pointRadius: {{pointRadius}},\n                borderWidth: {{borderWidth}}\n            },\n            {{/estimations.payload.datasets}}\n        ]\n      },\n        options: {\n          maintainAspectRatio: false,\n          title: {\n            display: true,\n            text: ''\n          },\n          legend: {\n            position: 'top',\n            display: true\n          },\n          interaction: {\n            intersect: false,\n            mode: 'index',\n          },      \n          scales: {\n              y: {\n                  beginAtZero: true,\n                  title: {\n                      display: true,\n                      text: \"Energy in kWh\"\n                  }\n              },\n          },\n          plugins: {\n              arbitraryLine: {\n                  pastBackgroundColor: '#eee',\n                  nowBackgroundColor: '#ddd',\n                  offset: 1,\n                  hours: {{ dess_hours }},\n                  is_half_hour_schedule: {{ is_half_hour_schedule }}\n              },\n              title: {\n                  display: true,\n                  text: \"Overview graph\"\n              },\n              subtitle: {\n                  display: true,\n                  text: \"\"\n              },\n              tooltip: {\n                  callbacks: {\n                      label: function(ctx) {\n                let label = ctx.dataset.label || \"\";\n                if (label === 'Battery') {\n                    label += ': ';\n                    label += ctx.parsed.y.toFixed(2)\n                    label += ' ('\n                    label += ((ctx.parsed.y / {{flow.dess.options.b_max}} ) * 100).toFixed(1)\n                    label += '%)'\n                }\n                else {\n                    label += ': ' + ctx.parsed.y.toFixed(2)\n                }\n                return label;\n                      }\n                  }\n              }\n          }\n        },\n        plugins: [arbitraryLine]\n      }\n    );\n\n  const schedulechart = new Chart(\n    document.getElementById('schedule'),\n    {\n      type: 'bar',\n      data: {\n        labels: [{{#estimations.payload.labels}}\"{{.}}\",{{/estimations.payload.labels}}],\n        datasets: [\n            {{#schedule.payload.datasets}}\n            {\n                label: '{{label}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                backgroundColor: '{{backgroundColor}}',\n                fill: {{fill}},\n            },\n            {{/schedule.payload.datasets}}\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Energy in kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD',\n                hours: {{ dess_hours }},\n                is_half_hour_schedule: {{ is_half_hour_schedule }}\n            },\n            title: {\n                display: true,\n                text: \"Schedule graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"Positive values represent the energy used from the item (opposite for negatives).\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n\n  const dapchart = new Chart(\n    document.getElementById('dayaheadprices'),\n    {\n      type: 'bar',\n      data: {\n        labels: [{{#estimations.payload.labels}}\"{{.}}\",{{/estimations.payload.labels}}],\n        datasets: [\n            {{#dayaheadprices.payload.datasets}}\n            {\n                label: '{{label}}',\n                type: '{{type}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                backgroundColor: '{{backgroundColor}}',\n                fill: {{fill}},\n                stepped: '{{stepped}}',\n                pointRadius: {{pointRadius}},\n                borderWidth: {{borderWidth}}\n            },\n            {{/dayaheadprices.payload.datasets}}\n        ]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },\n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Price in €/kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD',\n                offset: 1,\n                hours: {{ dess_hours }},\n                is_half_hour_schedule: {{ is_half_hour_schedule }}\n            },\n            title: {\n                display: true,\n                text: \"Price graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"Buy & Sell prices take the provider fee, energy tax and VAT into account.\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n\n  const ucchart = new Chart(\n    document.getElementById('costs'),\n    {\n      type: 'bar',\n      data: {\n        labels: [{{#estimations.payload.labels}}\"{{.}}\",{{/estimations.payload.labels}}],\n        datasets: [\n            {{#costs.payload.datasets}}\n            {\n                label: '{{label}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                backgroundColor: '{{backgroundColor}}',\n                fill: {{fill}},\n            },\n            {{/costs.payload.datasets}}\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Cost in €\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD',\n                hours: {{ dess_hours }},\n                is_half_hour_schedule: {{ is_half_hour_schedule }}\n            },\n            title: {\n                display: true,\n                text: \"Costs graph\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n\n  const enchart = new Chart(\n    document.getElementById('energy'),\n    {\n      type: 'bar',\n      data: {\n        labels: [{{#estimations.payload.labels}}\"{{.}}\",{{/estimations.payload.labels}}],\n        datasets: [\n            {{#energy.payload.datasets}}\n            {\n                label: '{{label}}',\n                type: '{{type}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                backgroundColor: '{{backgroundColor}}',\n                fill: {{fill}},\n                stepped: '{{stepped}}',\n                {{#pointStyle}}\n                pointStyle: {{pointStyle}},\n                {{/pointStyle}}\n                {{#borderWidth}}\n                borderWidth: {{borderWidth}},\n                {{/borderWidth}}\n                {{#stack}}\n                stack: {{stack}},\n                {{/stack}}\n            },\n            {{/energy.payload.datasets}}\n        ]\n      },\n      options: {\n        elements: {\n            point:{\n                radius: 0\n            }\n        },\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true,\n          labels: {\n              filter: function(item, chart) {\n                return !item.text.includes(\"DISCARD\");\n              }\n          }\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD',\n                hours: {{ dess_hours }},\n                is_half_hour_schedule: {{ is_half_hour_schedule }}\n            },\n            title: {\n                display: true,\n                text: \"Energy Graph\"\n            }\n        }\n    },\n      plugins: [arbitraryLine]\n    }\n  );\n\n</script>\n<hr />\n\n<h3>Dynamic ESS schedules</h3>\n\n<p>\nThe table shows all inserted Dynamic ESS Schedules.\n</p>\n\n<table class=\"dess-table\">\n  <thead>\n    <tr>\n      <th>Schedule</th>\n      <th>Start</th>\n      <th>Targeted Soc</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>#0</td>\n      <td>{{table.0.start}}</td>\n      <td>{{table.0.soc}} %</td>\n    </tr>\n    <tr>\n      <td>#1</td>\n      <td>{{table.1.start}}</td>\n      <td>{{table.1.soc}} %</td>\n    </tr>\n    <tr>\n      <td>#2</td>\n      <td>{{table.2.start}}</td>\n      <td>{{table.2.soc}} %</td>\n    </tr>\n    <tr>\n      <td>#3</td>\n      <td>{{table.3.start}}</td>\n      <td>{{table.3.soc}} %</td>\n    </tr>\n  </tbody>\n</table>\n\n  <hr />\n  Last update: {{ lastValidUpdate }}\n\n  </body>\n</html>",
        "output": "str",
        "x": 860,
        "y": 540,
        "wires": [
            [
                "d3d40108b0f7473b"
            ]
        ]
    },
    {
        "id": "f7b6663ee3daa093",
        "type": "template",
        "z": "8e798fc93e6ce007",
        "g": "59ccc632b3a9d67f",
        "name": "javascript",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "\n     const arbitraryLine = {\n        id: 'arbitraryLine',\n        beforeDraw(chart, args, options){\n            const { \n                ctx, \n                chartArea: { top, right, bottom, left, width, height, margins}, \n                scales: {x, y}\n            } = chart;\n            ctx.save()\n            const d = new Date();\n            let hours = options.hours || 24\n            let mp = options.is_half_hour_schedule ? 2 : 1\n            ctx.strokeStyle = options.nowBackgroundColor\n            ctx.fillStyle = options.nowBackgroundColor\n            let widthNow = (width / hours) * (d.getHours()+1) * mp\n            let offset = ( options.offset || 0) * ( width / (hours * 2 ) ) - (( options.offset || 0 ) * .5 * (width / (hours * 4 )))\n            ctx.fillRect(left + offset, top, widthNow, height)\n            ctx.strokeStyle = options.pastBackgroundColor\n            ctx.fillStyle = options.pastBackgroundColor\n            let widthPast = (width * mp / hours ) * (d.getHours())\n            ctx.fillRect(left, top, widthPast + offset, height)\n            ctx.restore()\n            \n        }\n    }\n\n",
        "output": "str",
        "x": 540,
        "y": 580,
        "wires": [
            [
                "d34b91dbb56f20c0"
            ]
        ]
    },
    {
        "id": "7897a058fdb517cc",
        "type": "ui_template",
        "z": "8e798fc93e6ce007",
        "g": "59ccc632b3a9d67f",
        "group": "e036f6768d7d4a95",
        "name": "",
        "order": 2,
        "width": "14",
        "height": "1",
        "format": "<div>\n Link to <a href=\"/dess\">Dynamic ESS</a>   \n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1040,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "e036f6768d7d4a95",
        "type": "ui_group",
        "name": "Dynamic ESS",
        "tab": "cc1a49b54f71c790",
        "order": 2,
        "disp": false,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cc1a49b54f71c790",
        "type": "ui_tab",
        "name": "Dynamic ESS",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
