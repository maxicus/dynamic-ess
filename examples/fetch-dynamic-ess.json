[
    {
        "id": "5999fb9f53a5c90c",
        "type": "victron-output-settings",
        "z": "ff6dd285a92b3902",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/AcPowerSetPoint",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "com.victronenergy.settings",
            "paths": [
                {
                    "path": "/Settings/CGwacs/AcPowerSetPoint",
                    "type": "float",
                    "name": "ESS control loop setpoint (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
                    "type": "float",
                    "name": "ESS Minimum SoC (unless grid fails) (%)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/State",
                    "type": "enum",
                    "name": "ESS BatteryLife state",
                    "enum": {
                        "0": "Unused, BL disabled",
                        "1": "Restarting",
                        "2": "Self-consumption",
                        "3": "Self-consumption",
                        "4": "Self-consumption",
                        "5": "Discharge disabled",
                        "6": "Force charge",
                        "7": "Sustain",
                        "8": "Low Soc Recharge",
                        "9": "Keep batteries charged",
                        "10": "BL Disabled",
                        "11": "BL Disabled (Low SoC)",
                        "12": "BL Disabled (Low SOC recharge)"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeCurrent",
                    "type": "float",
                    "name": "DVCC system max charge current (A DC)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/Hub4Mode",
                    "type": "enum",
                    "name": "ESS Mode",
                    "enum": {
                        "1": "ESS with Phase Compensation",
                        "2": "ESS without phase compensation",
                        "3": "Disabled/External Control"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxChargePercentage",
                    "type": "float",
                    "name": "ESS max charge current (fractional) (%)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxDischargePercentage",
                    "type": "float",
                    "name": "ESS max discharge current (fractional) (%)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxDischargePower",
                    "type": "float",
                    "name": "ESS max discharge current (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxFeedInPower",
                    "type": "float",
                    "name": "Maximum System Grid Feed In (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/OvervoltageFeedIn",
                    "type": "enum",
                    "name": "Feed excess DC-coupled PV into grid",
                    "enum": {
                        "0": "Don’t feed excess DC-tied PV into grid",
                        "1": "Feed excess DC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/PreventFeedback",
                    "type": "enum",
                    "name": "AC-coupled PV - grid feed in excess",
                    "enum": {
                        "0": "Feed excess AC-tied PV into grid",
                        "1": "Don’t feed excess AC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeVoltage",
                    "type": "float",
                    "name": "Limit managed battery voltage (V DC)",
                    "writable": true
                }
            ]
        },
        "pathObj": {
            "path": "/Settings/CGwacs/AcPowerSetPoint",
            "type": "float",
            "name": "ESS control loop setpoint (W)",
            "writable": true
        },
        "name": "",
        "x": 810,
        "y": 160,
        "wires": []
    },
    {
        "id": "ec317b50f856de92",
        "type": "victron-dynamic-ess",
        "z": "ff6dd285a92b3902",
        "name": "Dynamic ESS VRM site",
        "vrmtoken": "",
        "site_id": "",
        "country": "nl",
        "b_max": "",
        "fb_max": "",
        "tb_max": "",
        "fg_max": "",
        "tg_max": "",
        "b_cost": "",
        "p_offset": "",
        "long": "5.6",
        "lat": "53.0",
        "verbose": true,
        "x": 320,
        "y": 240,
        "wires": [
            [
                "14b5095e69d0c786",
                "5999fb9f53a5c90c"
            ],
            [
                "fd3adec04c526669",
                "7584a0900d556cf7",
                "f84f127d55e49b58",
                "832f4949f82f8208",
                "79c8b91e578739ab"
            ]
        ]
    },
    {
        "id": "9bab60c0b2168a4d",
        "type": "inject",
        "z": "ff6dd285a92b3902",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "url",
                "v": "https://vrm-smart-scheduling-api.k.elnino-production.com/",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "ec317b50f856de92"
            ]
        ]
    },
    {
        "id": "14b5095e69d0c786",
        "type": "debug",
        "z": "ff6dd285a92b3902",
        "name": "Setpoint",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 120,
        "wires": []
    },
    {
        "id": "fd3adec04c526669",
        "type": "debug",
        "z": "ff6dd285a92b3902",
        "name": "Scheduled charging",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 240,
        "wires": []
    },
    {
        "id": "38c5065788ead95f",
        "type": "ui_template",
        "z": "ff6dd285a92b3902",
        "group": "ab8b2a192b041af5",
        "name": "arbitraryLine plugin",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<script>\n  const arbitraryLine = {\n      id: 'arbitraryLine',\n      beforeDraw(chart, args, options){\n          const { \n              ctx, \n              chartArea: { top, right, bottom, left, width, height, margins}, \n              scales: {x, y}\n          } = chart;\n          ctx.save()\n          const d = new Date();\n          ctx.strokeStyle = options.arbitraryLinebackgroundColor\n          ctx.fillStyle = options.arbitraryLinebackgroundColor\n          let xl = ( width / 24 * ( d.getHours() + 2 )) - x.paddingLeft\n          if (chart.config.type === 'bar' ) {\n            xl = width / 24 * ( d.getHours() + 1 )\n          }\n          ctx.fillRect(left, top, xl, height)\n          ctx.restore()\n          \n      }\n  }\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 730,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "7584a0900d556cf7",
        "type": "function",
        "z": "ff6dd285a92b3902",
        "name": "Estimations",
        "func": "msg.payload = {\n    \"datasets\": [\n        { label: 'Consumption',\n          data: Object.values(msg.payload.output.C),\n          borderColor: \"rgb(168, 50, 70)\",\n          fill: false,\n          stepped: true,\n          pointRadius: 1,\n          borderWidth: 1\n        },\n        { label: 'Battery',\n          data: Object.values(msg.payload.output.B),\n          borderColor: \"rgb(75, 192, 192)\",\n          fill: false,\n          stepped: true,\n          pointRadius: 1,\n          borderWidth: 1\n        },\n        { label: 'PV yield',\n          data: Object.values(msg.payload.output.PV),\n          borderColor: \"rgb(250, 177, 7)\",\n          backgroundColor: \"rgb(250, 177, 7)\",\n          fill: true,\n          stepped: true,\n          pointRadius: 1\n        }        \n        ],\n    \"labels\": Object.keys(msg.payload.schedule)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 380,
        "wires": [
            [
                "a3f043a73c51b210"
            ]
        ]
    },
    {
        "id": "a3f043a73c51b210",
        "type": "ui_template",
        "z": "ff6dd285a92b3902",
        "group": "ab8b2a192b041af5",
        "name": "Estimations",
        "order": 5,
        "width": "10",
        "height": "6",
        "format": "<div>\n      <canvas id=\"estimations\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const estimationschart = new Chart(\n    document.getElementById('estimations'),\n    {\n      type: 'line',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },        \n        plugins: {\n            arbitraryLine: {\n                arbitraryLinebackgroundColor: 'lightgray'\n            },\n            title: {\n                display: true,\n                text: \"Estimations (in kWh)\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n            estimationschart.config.options.title.text = d.title || ''\n            estimationschart.config.data.labels = d.labels\n            estimationschart.config.data.datasets = d.datasets\n            estimationschart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 910,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "f84f127d55e49b58",
        "type": "function",
        "z": "ff6dd285a92b3902",
        "name": "Usage",
        "func": "msg.payload = {\n    \"datasets\": [\n        { label: \"Grid Usage\",\n          data: Object.values(msg.payload.output.g),\n          borderColor: \"rgb(168, 50, 70)\",\n          backgroundColor: \"rgb(168, 50, 70)\",\n          fill: true\n        },\n        { label: \"Battery usage\",\n          data: Object.values(msg.payload.output.b),\n          borderColor: \"rgb(75,192,192)\",\n          backgroundColor: \"rgb(75,192,192)\",\n          fill: true\n        }],\n    \"labels\": Object.keys(msg.payload.schedule)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 420,
        "wires": [
            [
                "8e43177e1b753345"
            ]
        ]
    },
    {
        "id": "8e43177e1b753345",
        "type": "ui_template",
        "z": "ff6dd285a92b3902",
        "group": "ab8b2a192b041af5",
        "name": "Usage",
        "order": 5,
        "width": "10",
        "height": "6",
        "format": "<div>\n  <canvas id=\"usage\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const usagechart = new Chart(\n    document.getElementById('usage'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },\n        plugins: {\n            arbitraryLine: {\n                arbitraryLinebackgroundColor: 'lightGray'\n            },\n            title: {\n                display: true,\n                text: \"Energy Usage (in kWh)\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n\n            usagechart.config.options.title.text = d.title || ''\n            usagechart.config.data.labels = d.labels\n            usagechart.config.data.datasets = d.datasets\n            usagechart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 890,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "832f4949f82f8208",
        "type": "function",
        "z": "ff6dd285a92b3902",
        "name": "Day ahead",
        "func": "msg.payload = {\n    \"datasets\": [\n        { label: \"Price\",\n          data: Object.values(msg.payload.output.p),\n          borderColor: \"rgb(168, 50, 70)\",\n          backgroundColor: \"rgb(75,192,192)\",\n          fill: true\n        }],\n    \"labels\": Object.keys(msg.payload.schedule)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 460,
        "wires": [
            [
                "df1ebc23d050a0ba"
            ]
        ]
    },
    {
        "id": "df1ebc23d050a0ba",
        "type": "ui_template",
        "z": "ff6dd285a92b3902",
        "group": "ab8b2a192b041af5",
        "name": "Day-ahead Prices",
        "order": 5,
        "width": "10",
        "height": "6",
        "format": "<div>\n  <canvas id=\"dayaheadprices\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const dapchart = new Chart(\n    document.getElementById('dayaheadprices'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },\n        plugins: {\n            arbitraryLine: {\n                arbitraryLinebackgroundColor: 'lightGray'\n            },\n            title: {\n                display: true,\n                text: \"Day-ahead Prices (in €/kWh)\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n\n            dapchart.config.options.title.text = d.title || ''\n            dapchart.config.data.labels = d.labels\n            dapchart.config.data.datasets = d.datasets\n            dapchart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 930,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "79c8b91e578739ab",
        "type": "function",
        "z": "ff6dd285a92b3902",
        "name": "Chart the output",
        "func": "\nmsg.payload = {\n    \"datasets\": [\n        { label: \"Grid costs\",\n          data: Object.values(msg.payload.output.g_cost),\n          borderColor: \"rgb(168, 50, 70)\",\n          backgroundColor: \"rgb(168, 50, 70)\",\n          fill: true\n        },\n        { label: \"Battery costs\",\n          data: Object.values(msg.payload.output.b_cost),\n          borderColor: \"rgb(75,192,192)\",\n          backgroundColor: \"rgb(75,192,192)\",\n          fill: true\n        }],\n    \"labels\": Object.keys(msg.payload.schedule)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 500,
        "wires": [
            [
                "43828a99e921328e"
            ]
        ]
    },
    {
        "id": "43828a99e921328e",
        "type": "ui_template",
        "z": "ff6dd285a92b3902",
        "group": "ab8b2a192b041af5",
        "name": "Usage costs",
        "order": 5,
        "width": "10",
        "height": "6",
        "format": "<div>\n  <canvas id=\"usagecosts\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const ucchart = new Chart(\n    document.getElementById('usagecosts'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },\n        plugins: {\n            arbitraryLine: {\n                arbitraryLinebackgroundColor: 'lightGray'\n            },\n            title: {\n                display: true,\n                text: \"Usage costs (in €)\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n\n            ucchart.config.options.title.text = d.title || ''\n            ucchart.config.data.labels = d.labels\n            ucchart.config.data.datasets = d.datasets\n            ucchart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 910,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "ab8b2a192b041af5",
        "type": "ui_group",
        "name": "Dynamic ESS",
        "tab": "cc1a49b54f71c790",
        "order": 2,
        "disp": false,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cc1a49b54f71c790",
        "type": "ui_tab",
        "name": "Dynamic ESS",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
