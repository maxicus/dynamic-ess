[
    {
        "id": "7a3625d6405d62b7",
        "type": "tab",
        "label": "Dynamic ESS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ec059468817c10cc",
        "type": "group",
        "z": "7a3625d6405d62b7",
        "name": "Setpoint",
        "style": {
            "label": true
        },
        "nodes": [
            "d19c937db0a313d7",
            "3490e10bec7ebc56"
        ],
        "x": 24,
        "y": 199,
        "w": 592,
        "h": 82
    },
    {
        "id": "aa6ee4f31dbcb2e7",
        "type": "group",
        "z": "7a3625d6405d62b7",
        "name": "Dynamic ESS",
        "style": {
            "label": true
        },
        "nodes": [
            "9b259e177e4ff742",
            "9f752e2428038b41",
            "f715f77e84276ea2",
            "3b360c01a405a2c7",
            "75a70536a27d4415",
            "7bc3124cbb459a5c"
        ],
        "x": 24,
        "y": 19,
        "w": 592,
        "h": 162
    },
    {
        "id": "3f60d2e803c27a4f",
        "type": "group",
        "z": "7a3625d6405d62b7",
        "name": "Graphing",
        "style": {
            "label": true
        },
        "nodes": [
            "dccfa78cda47e463",
            "e6dd13cf04144a2a",
            "2aa4632775d224bf",
            "72b592fb71baea5b",
            "092289e60708b2e4",
            "d5b1d615e96f6766",
            "230fe32cbb499a03",
            "40df3b84d5cdb352",
            "773f2582b9dac1d2",
            "7d6ad77de89b7568",
            "a64ceca6d0094a52",
            "43a8c4e41c4224bf",
            "3c45564e22e74842",
            "855051baa774e99a",
            "32c0fa1458112ab5",
            "bafc34a32180e637",
            "6082cf99017015ea",
            "a9c87dd7fbd84cb3",
            "c5f943c25240d8c4"
        ],
        "x": 644,
        "y": 19,
        "w": 592,
        "h": 482
    },
    {
        "id": "0a016f89692f973c",
        "type": "group",
        "z": "7a3625d6405d62b7",
        "name": "Idle battery",
        "style": {
            "label": true
        },
        "nodes": [
            "9619d431a576ae37",
            "61e121aad3a0823d",
            "2117fac95f9c4a4b"
        ],
        "x": 24,
        "y": 399,
        "w": 592,
        "h": 82
    },
    {
        "id": "c98747ce505f78a1",
        "type": "group",
        "z": "7a3625d6405d62b7",
        "name": "API info",
        "style": {
            "label": true
        },
        "nodes": [
            "552cb61bd54e7037",
            "af10a12ee64c8bd8"
        ],
        "x": 24,
        "y": 499,
        "w": 592,
        "h": 82
    },
    {
        "id": "3aaea8e8a477e708",
        "type": "group",
        "z": "7a3625d6405d62b7",
        "name": "Grid feed-in",
        "style": {
            "label": true
        },
        "nodes": [
            "78b07f7564af3bfc",
            "f97bc52e4af2615b"
        ],
        "x": 24,
        "y": 299,
        "w": 592,
        "h": 82
    },
    {
        "id": "d19c937db0a313d7",
        "type": "link in",
        "z": "7a3625d6405d62b7",
        "g": "ec059468817c10cc",
        "name": "setpoint",
        "links": [
            "9f752e2428038b41"
        ],
        "x": 65,
        "y": 240,
        "wires": [
            [
                "3490e10bec7ebc56"
            ]
        ]
    },
    {
        "id": "9b259e177e4ff742",
        "type": "inject",
        "z": "7a3625d6405d62b7",
        "g": "aa6ee4f31dbcb2e7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "url",
                "v": "https://vrm-smart-scheduling-api.k.elnino-production.com/",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "7bc3124cbb459a5c"
            ]
        ]
    },
    {
        "id": "9f752e2428038b41",
        "type": "link out",
        "z": "7a3625d6405d62b7",
        "g": "aa6ee4f31dbcb2e7",
        "name": "setpoint",
        "mode": "link",
        "links": [
            "d19c937db0a313d7"
        ],
        "x": 525,
        "y": 60,
        "wires": []
    },
    {
        "id": "f715f77e84276ea2",
        "type": "link out",
        "z": "7a3625d6405d62b7",
        "g": "aa6ee4f31dbcb2e7",
        "name": "graphing",
        "mode": "link",
        "links": [
            "b805402f793a2bb6",
            "a64ceca6d0094a52",
            "32c0fa1458112ab5",
            "9619d431a576ae37"
        ],
        "x": 575,
        "y": 80,
        "wires": []
    },
    {
        "id": "3b360c01a405a2c7",
        "type": "link out",
        "z": "7a3625d6405d62b7",
        "g": "aa6ee4f31dbcb2e7",
        "name": "grid feed-in",
        "mode": "link",
        "links": [
            "78b07f7564af3bfc"
        ],
        "x": 575,
        "y": 120,
        "wires": []
    },
    {
        "id": "75a70536a27d4415",
        "type": "link out",
        "z": "7a3625d6405d62b7",
        "g": "aa6ee4f31dbcb2e7",
        "name": "api info",
        "mode": "link",
        "links": [
            "af10a12ee64c8bd8"
        ],
        "x": 525,
        "y": 140,
        "wires": []
    },
    {
        "id": "dccfa78cda47e463",
        "type": "debug",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "name": "Scheduled charging",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 60,
        "wires": []
    },
    {
        "id": "e6dd13cf04144a2a",
        "type": "function",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "name": "Overview",
        "func": "msg.payload = {\n    \"datasets\": [\n        { label: 'Consumption',\n          type: 'line',\n          data: Object.values(msg.payload.output.C),\n          borderColor: \"#fa716e\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        },\n        { label: 'Battery',\n          type: 'line',\n          data: Object.values(msg.payload.output.B),\n          borderColor: \"#629acb\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        },\n        { label: 'PV yield',\n          type: 'line',\n          data: Object.values(msg.payload.output.PV),\n          borderColor: \"#f8aa3d\",\n          backgroundColor: \"#f8aa3dAA\",\n          fill: true,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        }        \n        ],\n    \"labels\": Object.keys(msg.payload.schedule)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 160,
        "wires": [
            [
                "2aa4632775d224bf"
            ]
        ]
    },
    {
        "id": "2aa4632775d224bf",
        "type": "ui_template",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "group": "dee9862e602bda45",
        "name": "Overview graph",
        "order": 3,
        "width": "12",
        "height": "6",
        "format": "<div>\n      <canvas id=\"estimations\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const estimationschart = new Chart(\n    document.getElementById('estimations'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Energy in kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Overview graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n            estimationschart.config.options.title.text = d.title || ''\n            estimationschart.config.data.labels = d.labels\n            estimationschart.config.data.datasets = d.datasets\n            estimationschart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1030,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "72b592fb71baea5b",
        "type": "function",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "name": "Schedule",
        "func": "msg.payload = {\n    \"datasets\": [\n        { label: \"Grid Usage\",\n          data: Object.values(msg.payload.output.g),\n          borderColor: \"#fa716e\",\n          backgroundColor: \"#fa716e\",\n          fill: true\n        },\n        { label: \"Battery usage\",\n          data: Object.values(msg.payload.output.b),\n          borderColor: \"#629acb\",\n          backgroundColor: \"#629acb\",\n          fill: true\n        }],\n    \"labels\": Object.keys(msg.payload.schedule)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 200,
        "wires": [
            [
                "092289e60708b2e4"
            ]
        ]
    },
    {
        "id": "092289e60708b2e4",
        "type": "ui_template",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "group": "dee9862e602bda45",
        "name": "Schedule graph",
        "order": 4,
        "width": "12",
        "height": "6",
        "format": "<div>\n  <canvas id=\"usage\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const usagechart = new Chart(\n    document.getElementById('usage'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Energy in kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Schedule graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"Positive values represent the energy pushed to the item (opposite for negatives).\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n\n            usagechart.config.options.title.text = d.title || ''\n            usagechart.config.data.labels = d.labels\n            usagechart.config.data.datasets = d.datasets\n            usagechart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1030,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "d5b1d615e96f6766",
        "type": "function",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "name": "Price",
        "func": "msg.payload = {\n    \"datasets\": [\n        { label: \"Buy Price\",\n            type: 'line',\n          data: Object.values(msg.payload.output.p_b),\n          borderColor: \"#fa716e\",\n          backgroundColor: \"#fa716e\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        },{ label: \"Sell Price\",\n            type: 'line',\n          data: Object.values(msg.payload.output.p_s),\n          borderColor: \"#57BC37\",\n          backgroundColor: \"#57BC37\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        },],\n    \"labels\": Object.keys(msg.payload.schedule)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 240,
        "wires": [
            [
                "230fe32cbb499a03"
            ]
        ]
    },
    {
        "id": "230fe32cbb499a03",
        "type": "ui_template",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "group": "dee9862e602bda45",
        "name": "Price graph",
        "order": 5,
        "width": "12",
        "height": "6",
        "format": "<div>\n  <canvas id=\"dayaheadprices\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const dapchart = new Chart(\n    document.getElementById('dayaheadprices'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Price in €/kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Price graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"Buy & Sell prices take the provider fee, energy tax and VAT into account.\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n\n            dapchart.config.options.title.text = d.title || ''\n            dapchart.config.data.labels = d.labels\n            dapchart.config.data.datasets = d.datasets\n            dapchart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1020,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "40df3b84d5cdb352",
        "type": "function",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "name": "Costs",
        "func": "\nmsg.payload = {\n    \"datasets\": [\n        { label: \"Grid costs\",\n          data: Object.values(msg.payload.output.g_cost),\n          borderColor: \"#fa716e\",\n          backgroundColor: \"#fa716e\",\n          fill: true\n        },\n        { label: \"Battery costs\",\n          data: Object.values(msg.payload.output.b_cost),\n          borderColor: \"#629acb\",\n          backgroundColor: \"#629acb\",\n          fill: true\n        }],\n    \"labels\": Object.keys(msg.payload.schedule)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 280,
        "wires": [
            [
                "773f2582b9dac1d2"
            ]
        ]
    },
    {
        "id": "773f2582b9dac1d2",
        "type": "ui_template",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "group": "dee9862e602bda45",
        "name": "Costs graph",
        "order": 6,
        "width": "12",
        "height": "6",
        "format": "<div>\n  <canvas id=\"usagecosts\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const ucchart = new Chart(\n    document.getElementById('usagecosts'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Cost in €\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Costs graph\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n\n            ucchart.config.options.title.text = d.title || ''\n            ucchart.config.data.labels = d.labels\n            ucchart.config.data.datasets = d.datasets\n            ucchart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1020,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "7d6ad77de89b7568",
        "type": "ui_template",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "group": "dee9862e602bda45",
        "name": "arbitraryLine plugin",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<script>\n  const arbitraryLine = {\n      id: 'arbitraryLine',\n      beforeDraw(chart, args, options){\n          const { \n              ctx, \n              chartArea: { top, right, bottom, left, width, height, margins}, \n              scales: {x, y}\n          } = chart;\n          ctx.save()\n          const d = new Date();\n          ctx.strokeStyle = options.nowBackgroundColor\n          ctx.fillStyle = options.nowBackgroundColor\n          let widthNow = (width / 24) * (d.getHours()+1)\n          ctx.fillRect(left, top, widthNow, height)\n          ctx.strokeStyle = options.pastBackgroundColor\n          ctx.fillStyle = options.pastBackgroundColor\n          let widthPast = (width / 24) * (d.getHours())\n          ctx.fillRect(left, top, widthPast, height)\n          ctx.restore()\n          \n      }\n  }\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 1060,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "a64ceca6d0094a52",
        "type": "link in",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "name": "graphing",
        "links": [
            "6704cb4025128d5e",
            "f715f77e84276ea2"
        ],
        "x": 685,
        "y": 200,
        "wires": [
            [
                "dccfa78cda47e463",
                "e6dd13cf04144a2a",
                "72b592fb71baea5b",
                "d5b1d615e96f6766",
                "40df3b84d5cdb352",
                "43a8c4e41c4224bf"
            ]
        ]
    },
    {
        "id": "43a8c4e41c4224bf",
        "type": "function",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "name": "Energy",
        "func": "b = Object.values(msg.payload.output.b);\ng = Object.values(msg.payload.output.g);\nC = Object.values(msg.payload.output.C);\nPV = Object.values(msg.payload.output.PV);\nn = C.map((c,i) => PV[i]-c);\n\nto_b = b.map(x => {if(x<0){return -x}else{return 0}});\nfrom_b = b.map(x => {if(x>0){return x}else{return 0}});\nto_g = g.map(x => {if(x<0){return -x}else{return 0}});\nfrom_g = g.map(x => {if(x>0){return x}else{return 0}});\n\nmet_need = C.map((c,i) => Math.min(c,PV[i]));\n\nfrom_g_to_b = []\nfrom_b_to_g = []\n\nfor (let i=0; i<24; i++) {\n    if (Math.sign(b[i]) * Math.sign(g[i]) >= 0){\n        from_b_to_g.push(0)\n        from_g_to_b.push(0)\n    } else if ( Math.sign(b[i]) == 1 & Math.sign(n[i]) == 1) {\n        from_b_to_g.push(b[i])\n        from_g_to_b.push(0)\n    } else if ( Math.sign(b[i]) == 1 & Math.sign(n[i]) == -1) {\n        from_b_to_g.push(-g[i])\n        from_g_to_b.push(0)\n    } else if ( Math.sign(g[i]) == 1 & Math.sign(n[i]) == 1) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(g[i])\n    } else if ( Math.sign(g[i]) == 1 & Math.sign(n[i]) == -1) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(-b[i])\n    }\n}\n\nfrom_g = from_g.map((x,i) => x-from_g_to_b[i])\nfrom_b = from_b.map((x,i) => x-from_b_to_g[i])\nto_b = to_b.map((x,i) => x-from_g_to_b[i])\nto_g = to_g.map((x,i) => x-from_b_to_g[i])\n\n\nmsg.payload = {\n    \"datasets\": [\n        { label: \"Consumption\",\n          type: 'line',\n          data: C,\n          borderColor: \"#fa716e\",\n          backgroundColor: \"#fa716e\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 0,\n          borderWidth: 1\n        },\n        { label: \"PV Yield\",\n          type: 'line',\n          data: PV,\n          borderColor: \"#f8aa3d\",\n          backgroundColor: \"#f8aa3d\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 0,\n          borderWidth: 1\n        },\n        { label: \"\",\n          type: 'bar',\n          data: met_need,\n          legend: false,\n          borderColor: \"#FFFFFF00\",\n          backgroundColor:\"#FFFFFF00\",\n          fill: true,\n          stack: 1,\n        },\n        { label: \"From Grid\",\n          type: 'bar',\n          data: from_g,\n          borderColor: \"#F35C58\",\n          backgroundColor:\"#F35C58\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"To Grid\",\n          type: 'bar',\n          data: to_g,\n          borderColor: \"#57BC37\",\n          backgroundColor:\"#57BC37\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"From Battery\",\n          type: 'bar',\n          data: from_b,\n          borderColor: \"#387DC5\",\n          backgroundColor:\"#387DC5\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"To Battery\",\n          type: 'bar',\n          data: to_b,\n          borderColor: \"#82CDD8\",\n          backgroundColor:\"#82CDD8\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"From Battery to Grid\",\n          type: 'bar',\n          data: from_b_to_g,\n          borderColor: \"#387DC5\",\n          backgroundColor:\"#57BC37\",\n          borderWidth: 2,\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"From Grid to Battery\",\n          type: 'bar',\n          data: from_g_to_b,\n          borderColor: \"#F35C58\",\n          borderWidth: 2,\n          backgroundColor:\"#82CDD8\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },],\n    \"labels\": Object.keys(msg.payload.schedule)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 320,
        "wires": [
            [
                "3c45564e22e74842"
            ]
        ]
    },
    {
        "id": "3c45564e22e74842",
        "type": "ui_template",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "group": "dee9862e602bda45",
        "name": "Energy graph",
        "order": 7,
        "width": "24",
        "height": "6",
        "format": "<div>\n  <canvas id=\"energygraph\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const enchart = new Chart(\n    document.getElementById('energygraph'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true,\n          labels: {\n              filter: function(item, chart) {\n                return !item.text.includes(\"DISCARD\");\n              }\n          }\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Energy Graph\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n\n            enchart.config.options.title.text = d.title || ''\n            enchart.config.data.labels = d.labels\n            enchart.config.data.datasets = d.datasets\n            enchart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1020,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "855051baa774e99a",
        "type": "ui_text",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "group": "dee9862e602bda45",
        "order": 1,
        "width": "24",
        "height": "1",
        "name": "Informative Text",
        "label": "Note: Light gray background on the charts display the recorded values, while the transparent background shows the estimated/planned values. The darker gray part designates the current hour.",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 1050,
        "y": 100,
        "wires": []
    },
    {
        "id": "32c0fa1458112ab5",
        "type": "link in",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "name": "graphing",
        "links": [
            "6704cb4025128d5e",
            "f715f77e84276ea2"
        ],
        "x": 695,
        "y": 380,
        "wires": [
            [
                "bafc34a32180e637"
            ]
        ]
    },
    {
        "id": "bafc34a32180e637",
        "type": "function",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "name": "Control Outputs",
        "func": "const date = new Date()\n\nmsg.payload = {\n    'gs_min_max': Object.values(msg.payload.output.gsmm)[date.getHours()],\n    'feed_in_enabled': Object.values(msg.payload.output.feed_in)[date.getHours()],\n    'battery_is_idle': Object.values(msg.payload.output.idle_b)[date.getHours()]\n}\n\nswitch (msg.payload.gs_min_max) {\n    case 0: msg.payload.gs_min_max = 'Grid setpoint is 0'\n    break\n    case 1: msg.payload.gs_min_max = 'Grid setpoint is minimum (<i>-tg_max</i>)'\n    break\n    case 2: msg.payload.gs_min_max = 'Grid setpoint is maximum (<i>fg_max</i>)'\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": [
            [
                "6082cf99017015ea",
                "a9c87dd7fbd84cb3",
                "c5f943c25240d8c4"
            ]
        ]
    },
    {
        "id": "6082cf99017015ea",
        "type": "ui_text",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "group": "07da7699d281bc03",
        "order": 2,
        "width": "8",
        "height": "2",
        "name": "",
        "label": "Set battery idle",
        "format": "{{msg.payload.battery_is_idle}}",
        "layout": "col-center",
        "className": "",
        "x": 1050,
        "y": 380,
        "wires": []
    },
    {
        "id": "a9c87dd7fbd84cb3",
        "type": "ui_text",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "group": "07da7699d281bc03",
        "order": 1,
        "width": "8",
        "height": "2",
        "name": "",
        "label": "Grid setpoint (gs_min_max)",
        "format": "{{msg.payload.gs_min_max}}",
        "layout": "col-center",
        "className": "",
        "x": 1090,
        "y": 420,
        "wires": []
    },
    {
        "id": "c5f943c25240d8c4",
        "type": "ui_text",
        "z": "7a3625d6405d62b7",
        "g": "3f60d2e803c27a4f",
        "group": "07da7699d281bc03",
        "order": 3,
        "width": "8",
        "height": "2",
        "name": "",
        "label": "Enable Grid feed-in",
        "format": "{{msg.payload.feed_in_enabled}}",
        "layout": "col-center",
        "className": "",
        "x": 1050,
        "y": 460,
        "wires": []
    },
    {
        "id": "9619d431a576ae37",
        "type": "link in",
        "z": "7a3625d6405d62b7",
        "g": "0a016f89692f973c",
        "name": "link in 1",
        "links": [
            "f715f77e84276ea2"
        ],
        "x": 65,
        "y": 440,
        "wires": [
            [
                "61e121aad3a0823d"
            ]
        ]
    },
    {
        "id": "61e121aad3a0823d",
        "type": "function",
        "z": "7a3625d6405d62b7",
        "g": "0a016f89692f973c",
        "name": "Battery control",
        "func": "const date = new Date()\n\nmsg.payload = Object.values(msg.payload.output.idle_b)[date.getHours()]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 440,
        "wires": [
            [
                "2117fac95f9c4a4b"
            ]
        ]
    },
    {
        "id": "2117fac95f9c4a4b",
        "type": "victron-idle-battery",
        "z": "7a3625d6405d62b7",
        "g": "0a016f89692f973c",
        "name": "Idle battery",
        "x": 520,
        "y": 440,
        "wires": []
    },
    {
        "id": "552cb61bd54e7037",
        "type": "debug",
        "z": "7a3625d6405d62b7",
        "g": "c98747ce505f78a1",
        "name": "API info",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 540,
        "wires": []
    },
    {
        "id": "af10a12ee64c8bd8",
        "type": "link in",
        "z": "7a3625d6405d62b7",
        "g": "c98747ce505f78a1",
        "name": "link in 2",
        "links": [
            "75a70536a27d4415"
        ],
        "x": 65,
        "y": 540,
        "wires": [
            [
                "552cb61bd54e7037"
            ]
        ]
    },
    {
        "id": "7bc3124cbb459a5c",
        "type": "victron-dynamic-ess",
        "z": "7a3625d6405d62b7",
        "g": "aa6ee4f31dbcb2e7",
        "name": "Dynamic ESS VRM site",
        "vrmtoken": "",
        "site_id": "",
        "country": "nl",
        "b_max": "14",
        "fb_max": "4.5",
        "tb_max": "6.5",
        "fg_max": "2.5",
        "tg_max": "2.5",
        "b_cost": "0.04",
        "p_offset": "0.03",
        "long": "5.6",
        "lat": "53.1",
        "verbose": true,
        "allow_disable_feedin": true,
        "x": 370,
        "y": 100,
        "wires": [
            [
                "9f752e2428038b41"
            ],
            [
                "f715f77e84276ea2"
            ],
            [
                "3b360c01a405a2c7"
            ],
            [
                "75a70536a27d4415"
            ]
        ]
    },
    {
        "id": "78b07f7564af3bfc",
        "type": "link in",
        "z": "7a3625d6405d62b7",
        "g": "3aaea8e8a477e708",
        "name": "grid feed-in",
        "links": [
            "3b360c01a405a2c7"
        ],
        "x": 65,
        "y": 340,
        "wires": [
            [
                "f97bc52e4af2615b"
            ]
        ]
    },
    {
        "id": "f97bc52e4af2615b",
        "type": "victron-output-ess",
        "z": "7a3625d6405d62b7",
        "g": "3aaea8e8a477e708",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/PreventFeedback",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "ESS System Settings",
            "paths": [
                {
                    "path": "/Settings/CGwacs/AcPowerSetPoint",
                    "type": "integer",
                    "name": "Grid set-point (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
                    "type": "integer",
                    "name": "Minimum Discharge SOC (%)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/State",
                    "type": "enum",
                    "name": "ESS state",
                    "enum": {
                        "1": "BatteryLife enabled (GUI controlled)",
                        "2": "Optimized Mode /w BatteryLife: self consumption",
                        "3": "Optimized Mode /w BatteryLife: self consumption, SoC exceeds 85%",
                        "4": "Optimized Mode /w BatteryLife: self consumption, SoC at 100%",
                        "5": "Optimized Mode /w BatteryLife: SoC below dynamic SoC limit",
                        "6": "Optimized Mode /w BatteryLife: SoC has been below SoC limit for more than 24 hours. Charging the battery (5A)",
                        "7": "Optimized Mode /w BatteryLife: Inverter/Charger is in sustain mode",
                        "8": "Optimized Mode /w BatteryLife: recharging, SoC dropped by 5% or more below the minimum SoC",
                        "9": "'Keep batteries charged' mode is enabled",
                        "10": "Optimized mode w/o BatteryLife: self consumption, SoC at or above minimum SoC",
                        "11": "Optimized mode w/o BatteryLife: self consumption, SoC is below minimum SoC",
                        "12": "Optimized mode w/o BatteryLife: recharging, SoC dropped by 5% or more below minimum SoC"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/Hub4Mode",
                    "type": "enum",
                    "name": "ESS mode",
                    "enum": {
                        "1": "Optimized mode or 'keep batteries charged' and phase compensation enabled",
                        "2": "Optimized mode or 'keep batteries charged' and phase compensation disabled",
                        "3": "External control"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxDischargePower",
                    "type": "integer",
                    "name": "Max inverter power (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxFeedInPower",
                    "type": "integer",
                    "name": "Maximum System Grid Feed In (W)",
                    "remarks": "<ul><li>-1: No limit</li><li> &gt;=0: limited system feed-in</li></ul><p>Applies to DC-coupled and AC-coupled feed-in.</p>",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/OvervoltageFeedIn",
                    "type": "enum",
                    "name": "Feed excess DC-coupled PV into grid",
                    "enum": {
                        "0": "Don’t feed excess DC-tied PV into grid",
                        "1": "Feed excess DC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/PreventFeedback",
                    "type": "enum",
                    "name": "Don’t feed excess AC-coupled PV into grid",
                    "enum": {
                        "0": "Feed excess AC-tied PV into grid",
                        "1": "Don’t feed excess AC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeCurrent",
                    "type": "float",
                    "name": "Charge current limit (A)",
                    "writable": true
                }
            ]
        },
        "pathObj": {
            "path": "/Settings/CGwacs/PreventFeedback",
            "type": "enum",
            "name": "Don’t feed excess AC-coupled PV into grid",
            "enum": {
                "0": "Feed excess AC-tied PV into grid",
                "1": "Don’t feed excess AC-tied PV into the grid"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "x": 350,
        "y": 340,
        "wires": []
    },
    {
        "id": "3490e10bec7ebc56",
        "type": "victron-output-ess",
        "z": "7a3625d6405d62b7",
        "g": "ec059468817c10cc",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/AcPowerSetPoint",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "ESS System Settings",
            "paths": [
                {
                    "path": "/Settings/CGwacs/AcPowerSetPoint",
                    "type": "integer",
                    "name": "Grid set-point (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
                    "type": "integer",
                    "name": "Minimum Discharge SOC (%)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/State",
                    "type": "enum",
                    "name": "ESS state",
                    "enum": {
                        "1": "BatteryLife enabled (GUI controlled)",
                        "2": "Optimized Mode /w BatteryLife: self consumption",
                        "3": "Optimized Mode /w BatteryLife: self consumption, SoC exceeds 85%",
                        "4": "Optimized Mode /w BatteryLife: self consumption, SoC at 100%",
                        "5": "Optimized Mode /w BatteryLife: SoC below dynamic SoC limit",
                        "6": "Optimized Mode /w BatteryLife: SoC has been below SoC limit for more than 24 hours. Charging the battery (5A)",
                        "7": "Optimized Mode /w BatteryLife: Inverter/Charger is in sustain mode",
                        "8": "Optimized Mode /w BatteryLife: recharging, SoC dropped by 5% or more below the minimum SoC",
                        "9": "'Keep batteries charged' mode is enabled",
                        "10": "Optimized mode w/o BatteryLife: self consumption, SoC at or above minimum SoC",
                        "11": "Optimized mode w/o BatteryLife: self consumption, SoC is below minimum SoC",
                        "12": "Optimized mode w/o BatteryLife: recharging, SoC dropped by 5% or more below minimum SoC"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/Hub4Mode",
                    "type": "enum",
                    "name": "ESS mode",
                    "enum": {
                        "1": "Optimized mode or 'keep batteries charged' and phase compensation enabled",
                        "2": "Optimized mode or 'keep batteries charged' and phase compensation disabled",
                        "3": "External control"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxDischargePower",
                    "type": "integer",
                    "name": "Max inverter power (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxFeedInPower",
                    "type": "integer",
                    "name": "Maximum System Grid Feed In (W)",
                    "remarks": "<ul><li>-1: No limit</li><li> &gt;=0: limited system feed-in</li></ul><p>Applies to DC-coupled and AC-coupled feed-in.</p>",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/OvervoltageFeedIn",
                    "type": "enum",
                    "name": "Feed excess DC-coupled PV into grid",
                    "enum": {
                        "0": "Don’t feed excess DC-tied PV into grid",
                        "1": "Feed excess DC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/PreventFeedback",
                    "type": "enum",
                    "name": "Don’t feed excess AC-coupled PV into grid",
                    "enum": {
                        "0": "Feed excess AC-tied PV into grid",
                        "1": "Don’t feed excess AC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeCurrent",
                    "type": "float",
                    "name": "Charge current limit (A)",
                    "writable": true
                }
            ]
        },
        "pathObj": {
            "path": "/Settings/CGwacs/AcPowerSetPoint",
            "type": "integer",
            "name": "Grid set-point (W)",
            "writable": true
        },
        "initial": "",
        "name": "",
        "x": 430,
        "y": 240,
        "wires": []
    },
    {
        "id": "dee9862e602bda45",
        "type": "ui_group",
        "name": "Visualisations",
        "tab": "e61c7daf0cdfa840",
        "order": 2,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "07da7699d281bc03",
        "type": "ui_group",
        "name": "Control outputs",
        "tab": "e61c7daf0cdfa840",
        "order": 3,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e61c7daf0cdfa840",
        "type": "ui_tab",
        "name": "Dynamic ESS",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
