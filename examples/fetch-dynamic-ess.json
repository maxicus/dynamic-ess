[
    {
        "id": "1004b1568061f0ed",
        "type": "group",
        "z": "fc595badb082c140",
        "name": "/dess page",
        "style": {
            "label": true
        },
        "nodes": [
            "93d84929a7e8f215",
            "f60accecc1f46a08",
            "3fecddb497bc5365",
            "928878cbd3fac1e6",
            "f695815874773519",
            "557e436c8a1b3fe5",
            "adfc9cf290646821",
            "adba20b403a6eb54",
            "7c4a51c3a3bb9f4f",
            "71e94c59bd88518d"
        ],
        "x": 114,
        "y": 439,
        "w": 832,
        "h": 162
    },
    {
        "id": "93d84929a7e8f215",
        "type": "http in",
        "z": "fc595badb082c140",
        "g": "1004b1568061f0ed",
        "name": "Dynamic ESS (/dess)",
        "url": "/dess",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 480,
        "wires": [
            [
                "71e94c59bd88518d"
            ]
        ]
    },
    {
        "id": "f60accecc1f46a08",
        "type": "template",
        "z": "fc595badb082c140",
        "g": "1004b1568061f0ed",
        "name": "html page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Dynamic ESS</title>\n        <link rel=\"stylesheet\" href=\"/dess/style.css\">\n  </head>\n  <body>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script src=\"/dess/index.js\"></script>\n  \n  <h2>Dynamic ESS - {{ flow.dess.site }} ({{ flow.dess.options.country }})</h2>\n\n<div class=\"canvas-container\">\n  <div class=\"canvas-pair\">\n    <div id=\"ca\" style=\"height: 30vh; width: 45%;display:inline-block;\">\n      <canvas id=\"estimations\"></canvas>\n    </div>\n\n    <div id=\"cb\" style=\"height: 30vh; width: 45%;margin-left:5%;display:inline-block;\">\n      <canvas id=\"schedule\"></canvas>\n    </div>\n  </div>\n  <div class=\"canvas-pair\">\n    <div id=\"cc\" style=\"height: 30vh; width: 45%;display:inline-block;\">\n      <canvas id=\"dayaheadprices\"></canvas>\n    </div>\n\n    <div id=\"cd\" style=\"height: 30vh; width: 45%;margin-left:5%;display:inline-block;\">\n      <canvas id=\"costs\"></canvas>\n    </div>\n  </div>\n</div>\n\n<div id=\"ce\" style=\"height: 30vh;\">\n  <canvas id=\"energy\"></canvas>\n</div>\n\nGrid setpoint (gs_min_max): {{gsmm}}<br />\nSet battery idle: {{idle_b}}<br />\nEnable Grid feed-in: {{feed_in}}\n\n<script>\n    const estimationschart = new Chart(\n    document.getElementById('estimations'),\n      {\n        type: 'bar',\n      data: {\n        labels: [{{estimations.payload.labels}}],\n        datasets: [\n            {{#estimations.payload.datasets}}\n            {\n                label: '{{label}}',\n                type: '{{type}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                {{#backgroundColor}}\n                backgroundColor: '{{backgroundColor}}',\n                {{/backgroundColor}}\n                fill: {{fill}},\n                stepped: '{{stepped}}',\n                pointRadius: {{pointRadius}},\n                borderWidth: {{borderWidth}}\n            },\n            {{/estimations.payload.datasets}}\n        ]\n      },\n        options: {\n          maintainAspectRatio: false,\n          title: {\n            display: true,\n            text: ''\n          },\n          legend: {\n            position: 'top',\n            display: true\n          },\n          interaction: {\n            intersect: false,\n            mode: 'index',\n          },      \n          scales: {\n              y: {\n                  beginAtZero: true,\n                  title: {\n                      display: true,\n                      text: \"Energy in kWh\"\n                  }\n              }\n          },\n          plugins: {\n              arbitraryLine: {\n                  pastBackgroundColor: '#EEEEEE',\n                  nowBackgroundColor: '#DDDDDD'\n              },\n              title: {\n                  display: true,\n                  text: \"Overview graph\"\n              },\n              subtitle: {\n                  display: true,\n                  text: \"\"\n              },\n              tooltip: {\n                  callbacks: {\n                      label: function(ctx) {\n                let label = ctx.dataset.label || \"\";\n                if (label === 'Battery') {\n                    label += ': ';\n                    label += ctx.parsed.y.toFixed(2)\n                    label += ' ('\n                    label += ((ctx.parsed.y / {{ flow.dess.options.B_max}} ) * 100).toFixed(1)\n                    label += '%)'\n                }\n                else {\n                    label += ': ' + ctx.parsed.y.toFixed(2)\n                }\n                return label;\n                      }\n                  }\n              }\n          }\n        },\n        plugins: [arbitraryLine]\n      }\n    );\n\n  const schedulechart = new Chart(\n    document.getElementById('schedule'),\n    {\n      type: 'bar',\n      data: {\n        labels: [{{schedule.payload.labels}}],\n        datasets: [\n            {{#schedule.payload.datasets}}\n            {\n                label: '{{label}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                backgroundColor: '{{backgroundColor}}',\n                fill: {{fill}},\n            },\n            {{/schedule.payload.datasets}}\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Energy in kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Schedule graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"Positive values represent the energy pushed to the item (opposite for negatives).\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n\n  const dapchart = new Chart(\n    document.getElementById('dayaheadprices'),\n    {\n      type: 'bar',\n      data: {\n        labels: [{{dayaheadprices.payload.labels}}],\n        datasets: [\n            {{#dayaheadprices.payload.datasets}}\n            {\n                label: '{{label}}',\n                type: '{{type}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                backgroundColor: '{{backgroundColor}}',\n                fill: {{fill}},\n                stepped: '{{stepped}}',\n                pointRadius: {{pointRadius}},\n                borderWidth: {{borderWidth}}\n            },\n            {{/dayaheadprices.payload.datasets}}\n        ]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },\n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Price in €/kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Price graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"Buy & Sell prices take the provider fee, energy tax and VAT into account.\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n\n  const ucchart = new Chart(\n    document.getElementById('costs'),\n    {\n      type: 'bar',\n      data: {\n        labels: [{{costs.payload.labels}}],\n        datasets: [\n            {{#costs.payload.datasets}}\n            {\n                label: '{{label}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                backgroundColor: '{{backgroundColor}}',\n                fill: {{fill}},\n            },\n            {{/costs.payload.datasets}}\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Cost in €\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Costs graph\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n\n  const enchart = new Chart(\n    document.getElementById('energy'),\n    {\n      type: 'bar',\n      data: {\n        labels: [{{energy.payload.labels}}],\n        datasets: [\n            {{#energy.payload.datasets}}\n            {\n                label: '{{label}}',\n                type: '{{type}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                backgroundColor: '{{backgroundColor}}',\n                fill: {{fill}},\n                stepped: '{{stepped}}',\n                {{#pointStyle}}\n                pointStyle: {{pointStyle}},\n                {{/pointStyle}}\n                {{#borderWidth}}\n                borderWidth: {{borderWidth}},\n                {{/borderWidth}}\n                {{#stack}}\n                stack: {{stack}},\n                {{/stack}}\n            },\n            {{/energy.payload.datasets}}\n        ]\n      },\n      options: {\n        elements: {\n            point:{\n                radius: 0\n            }\n        },\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true,\n          labels: {\n              filter: function(item, chart) {\n                return !item.text.includes(\"DISCARD\");\n              }\n          }\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Energy Graph\"\n            }\n        }\n    },\n      plugins: [arbitraryLine]\n    }\n  );\n\n</script>\n  <hr />\n  Last update: {{ lastValidUpdate }}\n\n  </body>\n</html>",
        "output": "str",
        "x": 680,
        "y": 480,
        "wires": [
            [
                "7c4a51c3a3bb9f4f"
            ]
        ]
    },
    {
        "id": "3fecddb497bc5365",
        "type": "http in",
        "z": "fc595badb082c140",
        "g": "1004b1568061f0ed",
        "name": "Stylesheet DESS",
        "url": "/dess/style.css",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 560,
        "wires": [
            [
                "928878cbd3fac1e6"
            ]
        ]
    },
    {
        "id": "928878cbd3fac1e6",
        "type": "template",
        "z": "fc595badb082c140",
        "g": "1004b1568061f0ed",
        "name": "stylesheet",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "body {\n  background-color: #fff;\n  padding-left: 5%;\n  padding-right: 5%;\n}\nh1 {\n  color: white;\n}\np {\n  color: black;\n}\n\n",
        "output": "str",
        "x": 480,
        "y": 560,
        "wires": [
            [
                "f695815874773519"
            ]
        ]
    },
    {
        "id": "f695815874773519",
        "type": "change",
        "z": "fc595badb082c140",
        "g": "1004b1568061f0ed",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/css",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 560,
        "wires": [
            [
                "7c4a51c3a3bb9f4f"
            ]
        ]
    },
    {
        "id": "557e436c8a1b3fe5",
        "type": "http in",
        "z": "fc595badb082c140",
        "g": "1004b1568061f0ed",
        "name": "Javascript DESS",
        "url": "/dess/index.js",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 520,
        "wires": [
            [
                "adfc9cf290646821"
            ]
        ]
    },
    {
        "id": "adfc9cf290646821",
        "type": "template",
        "z": "fc595badb082c140",
        "g": "1004b1568061f0ed",
        "name": "javascript",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "\n     const arbitraryLine = {\n        id: 'arbitraryLine',\n        beforeDraw(chart, args, options){\n            const { \n                ctx, \n                chartArea: { top, right, bottom, left, width, height, margins}, \n                scales: {x, y}\n            } = chart;\n            ctx.save()\n            const d = new Date();\n            ctx.strokeStyle = options.nowBackgroundColor\n            ctx.fillStyle = options.nowBackgroundColor\n            let widthNow = (width / 24) * (d.getHours()+1)\n            ctx.fillRect(left, top, widthNow, height)\n            ctx.strokeStyle = options.pastBackgroundColor\n            ctx.fillStyle = options.pastBackgroundColor\n            let widthPast = (width / 24) * (d.getHours())\n            ctx.fillRect(left, top, widthPast, height)\n            ctx.restore()\n            \n        }\n    }\n\n",
        "output": "str",
        "x": 480,
        "y": 520,
        "wires": [
            [
                "adba20b403a6eb54"
            ]
        ]
    },
    {
        "id": "adba20b403a6eb54",
        "type": "change",
        "z": "fc595badb082c140",
        "g": "1004b1568061f0ed",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/javascript",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 520,
        "wires": [
            [
                "7c4a51c3a3bb9f4f"
            ]
        ]
    },
    {
        "id": "7c4a51c3a3bb9f4f",
        "type": "http response",
        "z": "fc595badb082c140",
        "g": "1004b1568061f0ed",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 870,
        "y": 520,
        "wires": []
    },
    {
        "id": "71e94c59bd88518d",
        "type": "function",
        "z": "fc595badb082c140",
        "g": "1004b1568061f0ed",
        "name": "prepare dess variables",
        "func": "let dess = flow.get('dess')\n\nmsg.lastValidUpdate = new Date(flow.get('lastValidUpdate')).toLocaleString()\nlet date = new Date()\nmsg.hour = date.getHours()\nmsg.gsmm = dess.output.gsmm[msg.hour]\nmsg.feed_in = dess.output.feed_in[msg.hour]\nmsg.idle_b = dess.output.idle_b[msg.hour]\n\nmsg.estimations = {\n    payload: {\n        \"datasets\": [\n            {\n                label: 'Consumption',\n                type: 'line',\n                data: Object.values(dess.output.C).map(x => x.toFixed(3)),\n                borderColor: \"#FA716F\",\n                fill: false,\n                stepped: 'middle',\n                pointRadius: 1,\n                borderWidth: 1\n            },\n            {\n                label: 'Battery',\n                type: 'line',\n                data: Object.values(dess.output.B).map(x => x.toFixed(3)),\n                borderColor: \"#4790D0\",\n                fill: false,\n                stepped: 'middle',\n                pointRadius: 1,\n                borderWidth: 1\n            },\n            {\n                label: 'PV yield',\n                type: 'line',\n                data: Object.values(dess.output.PV).map(x => x.toFixed(3)),\n                borderColor: \"#F7AB3E\",\n                backgroundColor: \"#f8aa3dAA\",\n                fill: true,\n                stepped: 'middle',\n                pointRadius: 1,\n                borderWidth: 1\n            }\n        ],\n        \"labels\": Object.keys(dess.schedule),\n        \"B_max\": dess.options.B_max\n    }\n}\n\nmsg.schedule = {\n    payload: {\n        \"datasets\": [\n            {\n                label: \"Grid Usage\",\n                data: Object.values(dess.output.g).map(x => x.toFixed(3)),\n                borderColor: \"#FA716F\",\n                backgroundColor: \"#FA716F\",\n                fill: true\n            },\n            {\n                label: \"Battery usage\",\n                data: Object.values(dess.output.b).map(x => x.toFixed(3)),\n                borderColor: \"#4790D0\",\n                backgroundColor: \"#4790D0\",\n                fill: true\n            }],\n        \"labels\": Object.keys(dess.schedule)\n    }\n}\n\nmsg.dayaheadprices = {\n    payload: {\n        \"datasets\": [\n            {\n                label: \"Buy Price\",\n                type: 'line',\n                data: Object.values(dess.output.p_b).map(x => x.toFixed(3)),\n                borderColor: \"#FA716F\",\n                backgroundColor: \"#FA716F\",\n                fill: false,\n                stepped: 'middle',\n                pointRadius: 1,\n                borderWidth: 1\n            }, {\n                label: \"Sell Price\",\n                type: 'line',\n                data: Object.values(dess.output.p_s).map(x => x.toFixed(3)),\n                borderColor: \"#8BC964\",\n                backgroundColor: \"#8BC964\",\n                fill: false,\n                stepped: 'middle',\n                pointRadius: 1,\n                borderWidth: 1\n            },],\n        \"labels\": Object.keys(dess.schedule)\n    }\n}\n\nmsg.costs = {\n    payload: {\n        \"datasets\": [\n            {\n                label: \"Grid costs\",\n                data: Object.values(dess.output.g_cost).map(x => x.toFixed(3)),\n                borderColor: \"#FA716F\",\n                backgroundColor: \"#FA716F\",\n                fill: true\n            },\n            {\n                label: \"Battery costs\",\n                data: Object.values(dess.output.b_cost).map(x => x.toFixed(3)),\n                borderColor: \"#4790D0\",\n                backgroundColor: \"#4790D0\",\n                fill: true\n            }],\n        \"labels\": Object.keys(dess.schedule)\n    }\n}\n\nlet b = Object.values(dess.output.b).map(x => x.toFixed(3));\nlet g = Object.values(dess.output.g).map(x => x.toFixed(3));\nlet C = Object.values(dess.output.C).map(x => x.toFixed(3));\nlet PV = Object.values(dess.output.PV).map(x => x.toFixed(3));\nlet n = C.map((c, i) => PV[i] - c);\n\nlet to_b = b.map(x => { if (x < 0) { return -x } else { return 0 } });\nlet from_b = b.map(x => { if (x > 0) { return x } else { return 0 } });\nlet to_g = g.map(x => { if (x < 0) { return -x } else { return 0 } });\nlet from_g = g.map(x => { if (x > 0) { return x } else { return 0 } });\n\nlet met_need = C.map((c, i) => Math.min(c, PV[i]));\n\nlet from_g_to_b = []\nlet from_b_to_g = []\n\nfor (let i = 0; i <= 23; i++) {\n    if (Math.sign(b[i]) * Math.sign(g[i]) >= 0) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(0)\n    } else if (Math.sign(b[i]) == 1 && Math.sign(n[i]) >= 0) {\n        from_b_to_g.push(b[i])\n        from_g_to_b.push(0)\n    } else if (Math.sign(b[i]) == 1 && Math.sign(n[i]) == -1) {\n        from_b_to_g.push(-g[i])\n        from_g_to_b.push(0)\n    } else if (Math.sign(g[i]) == 1 && Math.sign(n[i]) >= 0) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(g[i])\n    } else if (Math.sign(g[i]) == 1 && Math.sign(n[i]) == -1) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(-b[i])\n    }\n}\n\nfrom_g = from_g.map((x, i) => (x - from_g_to_b[i]).toFixed(3))\nfrom_b = from_b.map((x, i) => (x - from_b_to_g[i]).toFixed(3))\nto_b = to_b.map((x, i) => (x - from_g_to_b[i]).toFixed(3))\nto_g = to_g.map((x, i) => (x - from_b_to_g[i]).toFixed(3))\n\nmsg.energy = {\n    payload: {\n        \"datasets\": [\n            {\n                label: \"Consumption\",\n                type: 'line',\n                data: C,\n                borderColor: \"#1066B1\",\n                backgroundColor: \"#1066B1\",\n                fill: false,\n                stepped: 'middle',\n                borderWidth: 1\n            },\n            {\n                label: \"PV Yield\",\n                type: 'line',\n                data: PV,\n                borderColor: \"#F7AB3E\",\n                backgroundColor: \"#F7AB3E\",\n                fill: false,\n                stepped: 'middle',\n                borderWidth: 1\n            },\n            {\n                label: \"\",\n                type: 'bar',\n                data: met_need,\n                legend: false,\n                borderColor: \"#FFFFFF00\",\n                backgroundColor: \"#FFFFFF00\",\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"From Grid\",\n                type: 'bar',\n                data: from_g,\n                borderColor: \"#FA716F\",\n                backgroundColor: \"#FA716F\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"To Grid\",\n                type: 'bar',\n                data: to_g,\n                borderColor: \"#8BC964\",\n                backgroundColor: \"#8BC964\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"From Battery\",\n                type: 'bar',\n                data: from_b,\n                borderColor: \"#4790D0\",\n                backgroundColor: \"#4790D0\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"To Battery\",\n                type: 'bar',\n                data: to_b,\n                borderColor: \"#9683EC\",\n                backgroundColor: \"#9683EC\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"From Battery to Grid\",\n                type: 'bar',\n                data: from_b_to_g,\n                borderColor: \"#4790D0\",\n                backgroundColor: \"#8BC964\",\n                borderWidth: 4,\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"From Grid to Battery\",\n                type: 'bar',\n                data: from_g_to_b,\n                borderColor: \"#FA716F\",\n                borderWidth: 4,\n                backgroundColor: \"#9683EC\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },],\n        \"labels\": Object.keys(dess.schedule)\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 480,
        "wires": [
            [
                "f60accecc1f46a08"
            ]
        ]
    },
    {
        "id": "4f5b463efe029f84",
        "type": "group",
        "z": "fc595badb082c140",
        "name": "Dynamic ESS",
        "style": {
            "label": true
        },
        "nodes": [
            "b3a5a257e30cb55d",
            "74fc8e63bf9bbd47",
            "11f726354a843c4c",
            "620af88cbe0a47a6",
            "d29b861d2a7b18f2",
            "b801553c2df1e422",
            "71444728cd51e009",
            "c846671f9f6f59e6",
            "47b503df2f23cc19"
        ],
        "x": 114,
        "y": 159,
        "w": 592,
        "h": 262
    },
    {
        "id": "b3a5a257e30cb55d",
        "type": "inject",
        "z": "fc595badb082c140",
        "g": "4f5b463efe029f84",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "url",
                "v": "https://vrm-dynamic-ess-api.victronenergy.com",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 200,
        "wires": [
            [
                "74fc8e63bf9bbd47"
            ]
        ]
    },
    {
        "id": "74fc8e63bf9bbd47",
        "type": "victron-dynamic-ess",
        "z": "fc595badb082c140",
        "g": "4f5b463efe029f84",
        "name": "",
        "site_id": "",
        "vrmtoken": "",
        "country": "nl",
        "b_max": "14",
        "fb_max": "4.5",
        "tb_max": "6.5",
        "fg_max": "2.5",
        "tg_max": "2.5",
        "b_cost": "0.04",
        "buy_price_formula": "(p+0.03+0.13)*1.21",
        "sell_price_formula": "(p-0.03+0.13)*1.21",
        "feed_in_possible": true,
        "feed_in_control_on": true,
        "verbose": true,
        "x": 500,
        "y": 200,
        "wires": [
            [
                "11f726354a843c4c"
            ],
            []
        ]
    },
    {
        "id": "11f726354a843c4c",
        "type": "link out",
        "z": "fc595badb082c140",
        "g": "4f5b463efe029f84",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "620af88cbe0a47a6"
        ],
        "x": 625,
        "y": 200,
        "wires": []
    },
    {
        "id": "620af88cbe0a47a6",
        "type": "link in",
        "z": "fc595badb082c140",
        "g": "4f5b463efe029f84",
        "name": "link in 1",
        "links": [
            "11f726354a843c4c"
        ],
        "x": 155,
        "y": 320,
        "wires": [
            [
                "d29b861d2a7b18f2"
            ]
        ]
    },
    {
        "id": "d29b861d2a7b18f2",
        "type": "function",
        "z": "fc595badb082c140",
        "g": "4f5b463efe029f84",
        "name": "Schedule 0",
        "func": "let dess = flow.get('dess')\nconst currentDateTime = new Date()\ncurrentDateTime.setMinutes(0, 0, 0)\nconst currentHour = currentDateTime.getHours()\nconst unixTimestamp = Math.floor(currentDateTime.getTime() / 1000)\n\nreturn [{\n      topic: 'SOC',\n      payload: dess.output.SOC[currentHour]\n    }, {\n      topic: 'Allow grid feed-in',\n      payload: dess.output.feed_in[currentHour] ? 1 : 0\n    }, {\n      topic: 'Duration',\n      payload: 3600\n    }, {\n      topic: 'Start',\n      payload: unixTimestamp\n    }]",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 320,
        "wires": [
            [
                "b801553c2df1e422"
            ],
            [
                "71444728cd51e009"
            ],
            [
                "c846671f9f6f59e6"
            ],
            [
                "47b503df2f23cc19"
            ]
        ]
    },
    {
        "id": "b801553c2df1e422",
        "type": "victron-output-custom",
        "z": "fc595badb082c140",
        "g": "4f5b463efe029f84",
        "service": "com.victronenergy.settings",
        "path": "/Settings/DynamicEss/Schedule/0/Soc",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "com.victronenergy.settings"
        },
        "pathObj": {
            "path": "/Settings/DynamicEss/Schedule/0/Soc",
            "name": "/Settings/DynamicEss/Schedule/0/Soc",
            "type": "number"
        },
        "name": "Schedule 0 - SOC",
        "onlyChanges": false,
        "x": 510,
        "y": 260,
        "wires": []
    },
    {
        "id": "71444728cd51e009",
        "type": "victron-output-custom",
        "z": "fc595badb082c140",
        "g": "4f5b463efe029f84",
        "service": "com.victronenergy.settings",
        "path": "/Settings/DynamicEss/Schedule/0/AllowGridFeedIn",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "com.victronenergy.settings"
        },
        "pathObj": {
            "path": "/Settings/DynamicEss/Schedule/0/AllowGridFeedIn",
            "name": "/Settings/DynamicEss/Schedule/0/AllowGridFeedIn",
            "type": "number"
        },
        "name": "Schedule 0 - Allow Grid Feed In",
        "onlyChanges": false,
        "x": 550,
        "y": 300,
        "wires": []
    },
    {
        "id": "c846671f9f6f59e6",
        "type": "victron-output-custom",
        "z": "fc595badb082c140",
        "g": "4f5b463efe029f84",
        "service": "com.victronenergy.settings",
        "path": "/Settings/DynamicEss/Schedule/0/Duration",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "com.victronenergy.settings"
        },
        "pathObj": {
            "path": "/Settings/DynamicEss/Schedule/0/Duration",
            "name": "/Settings/DynamicEss/Schedule/0/Duration",
            "type": "number"
        },
        "name": "Schedule 0 - Duration",
        "onlyChanges": false,
        "x": 520,
        "y": 340,
        "wires": []
    },
    {
        "id": "47b503df2f23cc19",
        "type": "victron-output-custom",
        "z": "fc595badb082c140",
        "g": "4f5b463efe029f84",
        "service": "com.victronenergy.settings",
        "path": "/Settings/DynamicEss/Schedule/0/Start",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "com.victronenergy.settings"
        },
        "pathObj": {
            "path": "/Settings/DynamicEss/Schedule/0/Start",
            "name": "/Settings/DynamicEss/Schedule/0/Start",
            "type": "number"
        },
        "name": "Schedule 0 - Start",
        "onlyChanges": false,
        "x": 510,
        "y": 380,
        "wires": []
    }
]
