[
    {
        "id": "21a9c715a17d136b",
        "type": "group",
        "z": "9a54b4bbc1a25e38",
        "name": "Setpoint",
        "style": {
            "label": true
        },
        "nodes": [
            "87e50916e4b2ab7f",
            "61fc83c9579be9fa"
        ],
        "x": 34,
        "y": 259,
        "w": 592,
        "h": 82
    },
    {
        "id": "87e50916e4b2ab7f",
        "type": "link in",
        "z": "9a54b4bbc1a25e38",
        "g": "21a9c715a17d136b",
        "name": "setpoint",
        "links": [
            "97a6c9928c54f382"
        ],
        "x": 75,
        "y": 300,
        "wires": [
            [
                "61fc83c9579be9fa"
            ]
        ]
    },
    {
        "id": "61fc83c9579be9fa",
        "type": "victron-output-ess",
        "z": "9a54b4bbc1a25e38",
        "g": "21a9c715a17d136b",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/AcPowerSetPoint",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "ESS System Settings",
            "paths": [
                {
                    "path": "/Settings/CGwacs/AcPowerSetPoint",
                    "type": "integer",
                    "name": "Grid set-point (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
                    "type": "integer",
                    "name": "Minimum Discharge SOC (%)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/State",
                    "type": "enum",
                    "name": "ESS state",
                    "enum": {
                        "1": "BatteryLife enabled (GUI controlled)",
                        "2": "Optimized Mode /w BatteryLife: self consumption",
                        "3": "Optimized Mode /w BatteryLife: self consumption, SoC exceeds 85%",
                        "4": "Optimized Mode /w BatteryLife: self consumption, SoC at 100%",
                        "5": "Optimized Mode /w BatteryLife: SoC below dynamic SoC limit",
                        "6": "Optimized Mode /w BatteryLife: SoC has been below SoC limit for more than 24 hours. Charging the battery (5A)",
                        "7": "Optimized Mode /w BatteryLife: Inverter/Charger is in sustain mode",
                        "8": "Optimized Mode /w BatteryLife: recharging, SoC dropped by 5% or more below the minimum SoC",
                        "9": "'Keep batteries charged' mode is enabled",
                        "10": "Optimized mode w/o BatteryLife: self consumption, SoC at or above minimum SoC",
                        "11": "Optimized mode w/o BatteryLife: self consumption, SoC is below minimum SoC",
                        "12": "Optimized mode w/o BatteryLife: recharging, SoC dropped by 5% or more below minimum SoC"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/Hub4Mode",
                    "type": "enum",
                    "name": "ESS mode",
                    "enum": {
                        "1": "Optimized mode or 'keep batteries charged' and phase compensation enabled",
                        "2": "Optimized mode or 'keep batteries charged' and phase compensation disabled",
                        "3": "External control"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxDischargePower",
                    "type": "integer",
                    "name": "Max inverter power (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxFeedInPower",
                    "type": "integer",
                    "name": "Maximum System Grid Feed In (W)",
                    "remarks": "<ul><li>-1: No limit</li><li> &gt;=0: limited system feed-in</li></ul><p>Applies to DC-coupled and AC-coupled feed-in.</p>",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/OvervoltageFeedIn",
                    "type": "enum",
                    "name": "Feed excess DC-coupled PV into grid",
                    "enum": {
                        "0": "Don’t feed excess DC-tied PV into grid",
                        "1": "Feed excess DC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/PreventFeedback",
                    "type": "enum",
                    "name": "Don’t feed excess AC-coupled PV into grid",
                    "enum": {
                        "0": "Feed excess AC-tied PV into grid",
                        "1": "Don’t feed excess AC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeCurrent",
                    "type": "float",
                    "name": "Charge current limit (A)",
                    "writable": true
                }
            ]
        },
        "pathObj": {
            "path": "/Settings/CGwacs/AcPowerSetPoint",
            "type": "integer",
            "name": "Grid set-point (W)",
            "writable": true
        },
        "initial": "",
        "name": "",
        "x": 440,
        "y": 300,
        "wires": []
    },
    {
        "id": "19a5fa52d0c435b3",
        "type": "group",
        "z": "9a54b4bbc1a25e38",
        "name": "Dynamic ESS",
        "style": {
            "label": true
        },
        "nodes": [
            "ac716d8187db1ddd",
            "97a6c9928c54f382",
            "aa6903ecd55c5b82",
            "bd95f7412b97ab28",
            "ef82392149259f53",
            "08a311e870e3aa08"
        ],
        "x": 34,
        "y": 79,
        "w": 592,
        "h": 162
    },
    {
        "id": "ac716d8187db1ddd",
        "type": "inject",
        "z": "9a54b4bbc1a25e38",
        "g": "19a5fa52d0c435b3",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "08a311e870e3aa08"
            ]
        ]
    },
    {
        "id": "97a6c9928c54f382",
        "type": "link out",
        "z": "9a54b4bbc1a25e38",
        "g": "19a5fa52d0c435b3",
        "name": "setpoint",
        "mode": "link",
        "links": [
            "87e50916e4b2ab7f"
        ],
        "x": 535,
        "y": 120,
        "wires": []
    },
    {
        "id": "aa6903ecd55c5b82",
        "type": "link out",
        "z": "9a54b4bbc1a25e38",
        "g": "19a5fa52d0c435b3",
        "name": "graphing",
        "mode": "link",
        "links": [
            "b805402f793a2bb6",
            "a64ceca6d0094a52",
            "32c0fa1458112ab5",
            "47db25c906f5f777",
            "0d3598ae63cce673",
            "83140894628e8954",
            "b1da7511b331883e",
            "03617972445c8ea6"
        ],
        "x": 585,
        "y": 140,
        "wires": []
    },
    {
        "id": "bd95f7412b97ab28",
        "type": "link out",
        "z": "9a54b4bbc1a25e38",
        "g": "19a5fa52d0c435b3",
        "name": "grid feed-in",
        "mode": "link",
        "links": [
            "56be420705e97c1d"
        ],
        "x": 585,
        "y": 180,
        "wires": []
    },
    {
        "id": "ef82392149259f53",
        "type": "link out",
        "z": "9a54b4bbc1a25e38",
        "g": "19a5fa52d0c435b3",
        "name": "api info",
        "mode": "link",
        "links": [
            "1bd8ca67e6f38466"
        ],
        "x": 535,
        "y": 200,
        "wires": []
    },
    {
        "id": "08a311e870e3aa08",
        "type": "victron-dynamic-ess",
        "z": "9a54b4bbc1a25e38",
        "g": "19a5fa52d0c435b3",
        "name": "",
        "vrmtoken": "",
        "site_id": "",
        "country": "nl",
        "b_max": "14",
        "fb_max": "4.5",
        "tb_max": "6.5",
        "fg_max": "2.5",
        "tg_max": "2.5",
        "b_cost": "0.04",
        "buy_price_formula": "(p+0.02+0.13)*1.21",
        "sell_price_formula": "(p+0.02+0.13)*1.21",
        "feed_in_possible": true,
        "feed_in_control_on": true,
        "verbose": false,
        "x": 360,
        "y": 160,
        "wires": [
            [
                "97a6c9928c54f382"
            ],
            [
                "aa6903ecd55c5b82"
            ],
            [
                "bd95f7412b97ab28"
            ],
            [
                "ef82392149259f53"
            ]
        ]
    },
    {
        "id": "f9b159b440adae5b",
        "type": "group",
        "z": "9a54b4bbc1a25e38",
        "name": "Idle battery",
        "style": {
            "label": true
        },
        "nodes": [
            "47db25c906f5f777",
            "83c5324834c8f530",
            "3ecea90c8a172f9e"
        ],
        "x": 34,
        "y": 459,
        "w": 592,
        "h": 82
    },
    {
        "id": "47db25c906f5f777",
        "type": "link in",
        "z": "9a54b4bbc1a25e38",
        "g": "f9b159b440adae5b",
        "name": "link in 1",
        "links": [
            "aa6903ecd55c5b82"
        ],
        "x": 75,
        "y": 500,
        "wires": [
            [
                "83c5324834c8f530"
            ]
        ]
    },
    {
        "id": "83c5324834c8f530",
        "type": "function",
        "z": "9a54b4bbc1a25e38",
        "g": "f9b159b440adae5b",
        "name": "Battery control",
        "func": "const date = new Date()\n\nmsg.payload = Object.values(msg.payload.output.idle_b)[date.getHours()]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 500,
        "wires": [
            [
                "3ecea90c8a172f9e"
            ]
        ]
    },
    {
        "id": "3ecea90c8a172f9e",
        "type": "victron-idle-battery",
        "z": "9a54b4bbc1a25e38",
        "g": "f9b159b440adae5b",
        "name": "",
        "x": 510,
        "y": 500,
        "wires": []
    },
    {
        "id": "4b258f387522a5e8",
        "type": "group",
        "z": "9a54b4bbc1a25e38",
        "name": "API info",
        "style": {
            "label": true
        },
        "nodes": [
            "eb9c4769e92a3a8b",
            "1bd8ca67e6f38466"
        ],
        "x": 34,
        "y": 559,
        "w": 592,
        "h": 82
    },
    {
        "id": "eb9c4769e92a3a8b",
        "type": "debug",
        "z": "9a54b4bbc1a25e38",
        "g": "4b258f387522a5e8",
        "name": "API info",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 600,
        "wires": []
    },
    {
        "id": "1bd8ca67e6f38466",
        "type": "link in",
        "z": "9a54b4bbc1a25e38",
        "g": "4b258f387522a5e8",
        "name": "link in 2",
        "links": [
            "ef82392149259f53"
        ],
        "x": 75,
        "y": 600,
        "wires": [
            [
                "eb9c4769e92a3a8b"
            ]
        ]
    },
    {
        "id": "74e98b9b06a511e7",
        "type": "group",
        "z": "9a54b4bbc1a25e38",
        "name": "Grid feed-in",
        "style": {
            "label": true
        },
        "nodes": [
            "56be420705e97c1d",
            "8ea1e84daf8982cc"
        ],
        "x": 34,
        "y": 359,
        "w": 592,
        "h": 82
    },
    {
        "id": "56be420705e97c1d",
        "type": "link in",
        "z": "9a54b4bbc1a25e38",
        "g": "74e98b9b06a511e7",
        "name": "grid feed-in",
        "links": [
            "bd95f7412b97ab28"
        ],
        "x": 75,
        "y": 400,
        "wires": [
            [
                "8ea1e84daf8982cc"
            ]
        ]
    },
    {
        "id": "8ea1e84daf8982cc",
        "type": "victron-output-ess",
        "z": "9a54b4bbc1a25e38",
        "g": "74e98b9b06a511e7",
        "service": "com.victronenergy.settings",
        "path": "/Settings/CGwacs/PreventFeedback",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "ESS System Settings",
            "paths": [
                {
                    "path": "/Settings/CGwacs/AcPowerSetPoint",
                    "type": "integer",
                    "name": "Grid set-point (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/MinimumSocLimit",
                    "type": "integer",
                    "name": "Minimum Discharge SOC (%)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/BatteryLife/State",
                    "type": "enum",
                    "name": "ESS state",
                    "enum": {
                        "1": "BatteryLife enabled (GUI controlled)",
                        "2": "Optimized Mode /w BatteryLife: self consumption",
                        "3": "Optimized Mode /w BatteryLife: self consumption, SoC exceeds 85%",
                        "4": "Optimized Mode /w BatteryLife: self consumption, SoC at 100%",
                        "5": "Optimized Mode /w BatteryLife: SoC below dynamic SoC limit",
                        "6": "Optimized Mode /w BatteryLife: SoC has been below SoC limit for more than 24 hours. Charging the battery (5A)",
                        "7": "Optimized Mode /w BatteryLife: Inverter/Charger is in sustain mode",
                        "8": "Optimized Mode /w BatteryLife: recharging, SoC dropped by 5% or more below the minimum SoC",
                        "9": "'Keep batteries charged' mode is enabled",
                        "10": "Optimized mode w/o BatteryLife: self consumption, SoC at or above minimum SoC",
                        "11": "Optimized mode w/o BatteryLife: self consumption, SoC is below minimum SoC",
                        "12": "Optimized mode w/o BatteryLife: recharging, SoC dropped by 5% or more below minimum SoC"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/Hub4Mode",
                    "type": "enum",
                    "name": "ESS mode",
                    "enum": {
                        "1": "Optimized mode or 'keep batteries charged' and phase compensation enabled",
                        "2": "Optimized mode or 'keep batteries charged' and phase compensation disabled",
                        "3": "External control"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxDischargePower",
                    "type": "integer",
                    "name": "Max inverter power (W)",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/MaxFeedInPower",
                    "type": "integer",
                    "name": "Maximum System Grid Feed In (W)",
                    "remarks": "<ul><li>-1: No limit</li><li> &gt;=0: limited system feed-in</li></ul><p>Applies to DC-coupled and AC-coupled feed-in.</p>",
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/OvervoltageFeedIn",
                    "type": "enum",
                    "name": "Feed excess DC-coupled PV into grid",
                    "enum": {
                        "0": "Don’t feed excess DC-tied PV into grid",
                        "1": "Feed excess DC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/CGwacs/PreventFeedback",
                    "type": "enum",
                    "name": "Don’t feed excess AC-coupled PV into grid",
                    "enum": {
                        "0": "Feed excess AC-tied PV into grid",
                        "1": "Don’t feed excess AC-tied PV into the grid"
                    },
                    "writable": true
                },
                {
                    "path": "/Settings/SystemSetup/MaxChargeCurrent",
                    "type": "float",
                    "name": "Charge current limit (A)",
                    "writable": true
                }
            ]
        },
        "pathObj": {
            "path": "/Settings/CGwacs/PreventFeedback",
            "type": "enum",
            "name": "Don’t feed excess AC-coupled PV into grid",
            "enum": {
                "0": "Feed excess AC-tied PV into grid",
                "1": "Don’t feed excess AC-tied PV into the grid"
            },
            "writable": true
        },
        "initial": "",
        "name": "",
        "x": 360,
        "y": 400,
        "wires": []
    },
    {
        "id": "af30ceb2e846359b",
        "type": "group",
        "z": "9a54b4bbc1a25e38",
        "name": "Dashboard",
        "style": {
            "label": true
        },
        "nodes": [
            "05d897e02f97ba71",
            "b08fb27c8b1ea7d9",
            "dc1f77694677659e",
            "ebef36752d00dd68",
            "dd87e32b86749b3b",
            "b1da7511b331883e",
            "dbe6929a53aa1a51",
            "a5200bb67d702c4b",
            "03617972445c8ea6",
            "800e0bb8efe6d894",
            "2160f2642a5b3e13",
            "e88a242452688639",
            "a7f674ce99c64369",
            "668d19a3b04379c6"
        ],
        "x": 654,
        "y": 79,
        "w": 592,
        "h": 462
    },
    {
        "id": "05d897e02f97ba71",
        "type": "ui_template",
        "z": "9a54b4bbc1a25e38",
        "g": "af30ceb2e846359b",
        "group": "4a5b4f645b9a0be2",
        "name": "Overview graph",
        "order": 3,
        "width": "12",
        "height": "6",
        "format": "<div>\n      <canvas id=\"estimations\" height=\"300px\"></canvas>\n</div>\n\n<script>\n    const estimationschart = new Chart(\n    document.getElementById('estimations'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Energy in kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Overview graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"\"\n            },\n            tooltip: {\n                callbacks: {\n                    label: function(context) {\n                        let label = context.dataset.label || \"\";\n                        if (label === 'Battery') {\n                            label += ': ';\n                            label += context.parsed.y\n                            label += ' ('\n                            label += d.b_max.toFixed(1)\n                            label += '%)'\n                        }\n                        return label;\n                    }\n                }\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n            estimationschart.config.options.title.text = d.title || ''\n            estimationschart.config.data.labels = d.labels\n            estimationschart.config.data.datasets = d.datasets\n            estimationschart.config.options.plugins.tooltip.callbacks.label = function(ctx) {\n                let label = ctx.dataset.label || \"\";\n                if (label === 'Battery') {\n                    label += ': ';\n                    label += ctx.parsed.y.toFixed(2)\n                    label += ' ('\n                    label += ((ctx.parsed.y / d.b_max) * 100).toFixed(1)\n                    label += '%)'\n                }\n                else {\n                    label += ': ' + ctx.parsed.y.toFixed(2)\n                }\n                return label;\n            }\n            estimationschart.update();\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1060,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "b08fb27c8b1ea7d9",
        "type": "ui_template",
        "z": "9a54b4bbc1a25e38",
        "g": "af30ceb2e846359b",
        "group": "4a5b4f645b9a0be2",
        "name": "Schedule graph",
        "order": 4,
        "width": "12",
        "height": "6",
        "format": "<div>\n  <canvas id=\"usage\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const usagechart = new Chart(\n    document.getElementById('usage'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Energy in kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Schedule graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"Positive values represent the energy pushed to the item (opposite for negatives).\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n\n            usagechart.config.options.title.text = d.title || ''\n            usagechart.config.data.labels = d.labels\n            usagechart.config.data.datasets = d.datasets\n            usagechart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1060,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "dc1f77694677659e",
        "type": "ui_template",
        "z": "9a54b4bbc1a25e38",
        "g": "af30ceb2e846359b",
        "group": "4a5b4f645b9a0be2",
        "name": "Price graph",
        "order": 5,
        "width": "12",
        "height": "6",
        "format": "<div>\n  <canvas id=\"dayaheadprices\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const dapchart = new Chart(\n    document.getElementById('dayaheadprices'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Price in €/kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Price graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"Buy & Sell prices take the provider fee, energy tax and VAT into account.\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n\n            dapchart.config.options.title.text = d.title || ''\n            dapchart.config.data.labels = d.labels\n            dapchart.config.data.datasets = d.datasets\n            dapchart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1050,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "ebef36752d00dd68",
        "type": "ui_template",
        "z": "9a54b4bbc1a25e38",
        "g": "af30ceb2e846359b",
        "group": "4a5b4f645b9a0be2",
        "name": "Costs graph",
        "order": 6,
        "width": "12",
        "height": "6",
        "format": "<div>\n  <canvas id=\"usagecosts\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const ucchart = new Chart(\n    document.getElementById('usagecosts'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Cost in €\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Costs graph\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n\n            ucchart.config.options.title.text = d.title || ''\n            ucchart.config.data.labels = d.labels\n            ucchart.config.data.datasets = d.datasets\n            ucchart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1050,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "dd87e32b86749b3b",
        "type": "ui_template",
        "z": "9a54b4bbc1a25e38",
        "g": "af30ceb2e846359b",
        "group": "4a5b4f645b9a0be2",
        "name": "arbitraryLine plugin",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<script>\n  const arbitraryLine = {\n      id: 'arbitraryLine',\n      beforeDraw(chart, args, options){\n          const { \n              ctx, \n              chartArea: { top, right, bottom, left, width, height, margins}, \n              scales: {x, y}\n          } = chart;\n          ctx.save()\n          const d = new Date();\n          ctx.strokeStyle = options.nowBackgroundColor\n          ctx.fillStyle = options.nowBackgroundColor\n          let widthNow = (width / 24) * (d.getHours()+1)\n          ctx.fillRect(left, top, widthNow, height)\n          ctx.strokeStyle = options.pastBackgroundColor\n          ctx.fillStyle = options.pastBackgroundColor\n          let widthPast = (width / 24) * (d.getHours())\n          ctx.fillRect(left, top, widthPast, height)\n          ctx.restore()\n          \n      }\n  }\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 1070,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b1da7511b331883e",
        "type": "link in",
        "z": "9a54b4bbc1a25e38",
        "g": "af30ceb2e846359b",
        "name": "graphing",
        "links": [
            "6704cb4025128d5e",
            "aa6903ecd55c5b82"
        ],
        "x": 695,
        "y": 300,
        "wires": [
            [
                "668d19a3b04379c6"
            ]
        ]
    },
    {
        "id": "dbe6929a53aa1a51",
        "type": "ui_template",
        "z": "9a54b4bbc1a25e38",
        "g": "af30ceb2e846359b",
        "group": "4a5b4f645b9a0be2",
        "name": "Energy graph",
        "order": 7,
        "width": "24",
        "height": "6",
        "format": "<div>\n  <canvas id=\"energygraph\" height=\"300px\"></canvas>\n</div>\n\n<script>\n  const enchart = new Chart(\n    document.getElementById('energygraph'),\n    {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            data: []\n          }\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true,\n          labels: {\n              filter: function(item, chart) {\n                return !item.text.includes(\"DISCARD\");\n              }\n          }\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD'\n            },\n            title: {\n                display: true,\n                text: \"Energy Graph\"\n            }\n        }\n    },\n      plugins: [arbitraryLine]\n    }\n  );\n  \n    (function(scope) {\n        scope.$watch('msg.payload', function(d) {\n            if (!d) { return }\n            enchart.config.options.title.text = d.title || ''\n            enchart.config.data.labels = d.labels\n            enchart.config.data.datasets = d.datasets\n            enchart.update();\n\n        });\n    })(scope);\n  \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1060,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "a5200bb67d702c4b",
        "type": "ui_text",
        "z": "9a54b4bbc1a25e38",
        "g": "af30ceb2e846359b",
        "group": "4a5b4f645b9a0be2",
        "order": 1,
        "width": "24",
        "height": "1",
        "name": "Informative Text",
        "label": "Note: Light gray background on the charts display the recorded values, while the transparent background shows the estimated/planned values. The darker gray part designates the current hour.",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 1060,
        "y": 160,
        "wires": []
    },
    {
        "id": "03617972445c8ea6",
        "type": "link in",
        "z": "9a54b4bbc1a25e38",
        "g": "af30ceb2e846359b",
        "name": "graphing",
        "links": [
            "6704cb4025128d5e",
            "aa6903ecd55c5b82"
        ],
        "x": 705,
        "y": 460,
        "wires": [
            [
                "800e0bb8efe6d894"
            ]
        ]
    },
    {
        "id": "800e0bb8efe6d894",
        "type": "function",
        "z": "9a54b4bbc1a25e38",
        "g": "af30ceb2e846359b",
        "name": "Control Outputs",
        "func": "const date = new Date()\n\nmsg.payload = {\n    'gs_min_max': Object.values(msg.payload.output.gsmm)[date.getHours()],\n    'feed_in_enabled': Object.values(msg.payload.output.feed_in)[date.getHours()],\n    'battery_is_idle': Object.values(msg.payload.output.idle_b)[date.getHours()]\n}\n\nswitch (msg.payload.gs_min_max) {\n    case 0: msg.payload.gs_min_max = 'Grid setpoint is 0'\n    break\n    case 1: msg.payload.gs_min_max = 'Grid setpoint is minimum (<i>-tg_max</i>)'\n    break\n    case 2: msg.payload.gs_min_max = 'Grid setpoint is maximum (<i>fg_max</i>)'\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 460,
        "wires": [
            [
                "2160f2642a5b3e13",
                "e88a242452688639",
                "a7f674ce99c64369"
            ]
        ]
    },
    {
        "id": "2160f2642a5b3e13",
        "type": "ui_text",
        "z": "9a54b4bbc1a25e38",
        "g": "af30ceb2e846359b",
        "group": "1975459d826d1a70",
        "order": 2,
        "width": "8",
        "height": "2",
        "name": "",
        "label": "Set battery idle",
        "format": "{{msg.payload.battery_is_idle}}",
        "layout": "col-center",
        "className": "",
        "x": 1060,
        "y": 420,
        "wires": []
    },
    {
        "id": "e88a242452688639",
        "type": "ui_text",
        "z": "9a54b4bbc1a25e38",
        "g": "af30ceb2e846359b",
        "group": "1975459d826d1a70",
        "order": 1,
        "width": "8",
        "height": "2",
        "name": "",
        "label": "Grid setpoint (gs_min_max)",
        "format": "{{msg.payload.gs_min_max}}",
        "layout": "col-center",
        "className": "",
        "x": 1100,
        "y": 460,
        "wires": []
    },
    {
        "id": "a7f674ce99c64369",
        "type": "ui_text",
        "z": "9a54b4bbc1a25e38",
        "g": "af30ceb2e846359b",
        "group": "1975459d826d1a70",
        "order": 3,
        "width": "8",
        "height": "2",
        "name": "",
        "label": "Enable Grid feed-in",
        "format": "{{msg.payload.feed_in_enabled}}",
        "layout": "col-center",
        "className": "",
        "x": 1070,
        "y": 500,
        "wires": []
    },
    {
        "id": "668d19a3b04379c6",
        "type": "function",
        "z": "9a54b4bbc1a25e38",
        "g": "af30ceb2e846359b",
        "name": "Payload to graph",
        "func": "let overview = {\n    payload: {\n    \"datasets\": [\n        { label: 'Consumption',\n          type: 'line',\n          data: Object.values(msg.payload.output.C),\n          borderColor: \"#FA716F\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        },\n        { label: 'Battery',\n          type: 'line',\n          data: Object.values(msg.payload.output.B),\n          borderColor: \"#4790D0\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        },\n        { label: 'PV yield',\n          type: 'line',\n          data: Object.values(msg.payload.output.PV),\n          borderColor: \"#F7AB3E\",\n          backgroundColor: \"#f8aa3dAA\",\n          fill: true,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        }        \n        ],\n    \"labels\": Object.keys(msg.payload.schedule),\n    \"b_max\": msg.payload.options.b_max\n}}\n\nlet schedule = {\n    payload: {\n    \"datasets\": [\n        { label: \"Grid Usage\",\n          data: Object.values(msg.payload.output.g),\n          borderColor: \"#FA716F\",\n          backgroundColor: \"#FA716F\",\n          fill: true\n        },\n        { label: \"Battery usage\",\n          data: Object.values(msg.payload.output.b),\n          borderColor: \"#4790D0\",\n          backgroundColor: \"#4790D0\",\n          fill: true\n        }],\n    \"labels\": Object.keys(msg.payload.schedule)\n}}\n\nlet price = {\n    payload: {\n    \"datasets\": [\n        { label: \"Buy Price\",\n            type: 'line',\n          data: Object.values(msg.payload.output.p_b),\n          borderColor: \"#FA716F\",\n          backgroundColor: \"#FA716F\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        },{ label: \"Sell Price\",\n            type: 'line',\n          data: Object.values(msg.payload.output.p_s),\n          borderColor: \"#8BC964\",\n          backgroundColor: \"#8BC964\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 1,\n          borderWidth: 1\n        },],\n    \"labels\": Object.keys(msg.payload.schedule)\n}}\n\nlet costs = {\n    payload: {\n    \"datasets\": [\n        { label: \"Grid costs\",\n          data: Object.values(msg.payload.output.g_cost),\n          borderColor: \"#FA716F\",\n          backgroundColor: \"#FA716F\",\n          fill: true\n        },\n        { label: \"Battery costs\",\n          data: Object.values(msg.payload.output.b_cost),\n          borderColor: \"#4790D0\",\n          backgroundColor: \"#4790D0\",\n          fill: true\n        }],\n    \"labels\": Object.keys(msg.payload.schedule)\n}}\n\nb = Object.values(msg.payload.output.b);\ng = Object.values(msg.payload.output.g);\nC = Object.values(msg.payload.output.C);\nPV = Object.values(msg.payload.output.PV);\nn = C.map((c,i) => PV[i]-c);\n\nto_b = b.map(x => {if(x<0){return -x}else{return 0}});\nfrom_b = b.map(x => {if(x>0){return x}else{return 0}});\nto_g = g.map(x => {if(x<0){return -x}else{return 0}});\nfrom_g = g.map(x => {if(x>0){return x}else{return 0}});\n\nmet_need = C.map((c,i) => Math.min(c,PV[i]));\n\nfrom_g_to_b = []\nfrom_b_to_g = []\n\nfor (let i=0; i<=23; i++) {\n    if (Math.sign(b[i]) * Math.sign(g[i]) >= 0){\n        from_b_to_g.push(0)\n        from_g_to_b.push(0)\n    } else if ( Math.sign(b[i]) == 1 & Math.sign(n[i]) >= 0) {\n        from_b_to_g.push(b[i])\n        from_g_to_b.push(0)\n    } else if ( Math.sign(b[i]) == 1 & Math.sign(n[i]) == -1) {\n        from_b_to_g.push(-g[i])\n        from_g_to_b.push(0)\n    } else if ( Math.sign(g[i]) == 1 & Math.sign(n[i]) >= 0) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(g[i])\n    } else if ( Math.sign(g[i]) == 1 & Math.sign(n[i]) == -1) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(-b[i])\n    }\n}\n\nfrom_g = from_g.map((x,i) => x-from_g_to_b[i])\nfrom_b = from_b.map((x,i) => x-from_b_to_g[i])\nto_b = to_b.map((x,i) => x-from_g_to_b[i])\nto_g = to_g.map((x,i) => x-from_b_to_g[i])\n\nlet energy = {\n    payload: {\n    \"datasets\": [\n        { label: \"Consumption\",\n          type: 'line',\n          data: C,\n          borderColor: \"#1066B1\",\n          backgroundColor: \"#1066B1\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 0,\n          borderWidth: 1\n        },\n        { label: \"PV Yield\",\n          type: 'line',\n          data: PV,\n          borderColor: \"#F7AB3E\",\n          backgroundColor: \"#F7AB3E\",\n          fill: false,\n          stepped: 'middle',\n          pointRadius: 0,\n          borderWidth: 1\n        },\n        { label: \"\",\n          type: 'bar',\n          data: met_need,\n          legend: false,\n          borderColor: \"#FFFFFF00\",\n          backgroundColor:\"#FFFFFF00\",\n          fill: true,\n          stack: 1,\n        },\n        { label: \"From Grid\",\n          type: 'bar',\n          data: from_g,\n          borderColor: \"#FA716F\",\n          backgroundColor:\"#FA716F\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"To Grid\",\n          type: 'bar',\n          data: to_g,\n          borderColor: \"#8BC964\",\n          backgroundColor:\"#8BC964\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"From Battery\",\n          type: 'bar',\n          data: from_b,\n          borderColor: \"#4790D0\",\n          backgroundColor:\"#4790D0\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"To Battery\",\n          type: 'bar',\n          data: to_b,\n          borderColor: \"#9683EC\",\n          backgroundColor:\"#9683EC\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"From Battery to Grid\",\n          type: 'bar',\n          data: from_b_to_g,\n          borderColor: \"#4790D0\",\n          backgroundColor:\"#8BC964\",\n          borderWidth: 4,\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },\n        { label: \"From Grid to Battery\",\n          type: 'bar',\n          data: from_g_to_b,\n          borderColor: \"#FA716F\",\n          borderWidth: 4,\n          backgroundColor:\"#9683EC\",\n          barPercentage: 0.95,\n          fill: true,\n          stack: 1,\n        },],\n    \"labels\": Object.keys(msg.payload.schedule)\n}}\n\nreturn [overview, schedule, price, costs, energy];",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 300,
        "wires": [
            [
                "05d897e02f97ba71"
            ],
            [
                "b08fb27c8b1ea7d9"
            ],
            [
                "dc1f77694677659e"
            ],
            [
                "ebef36752d00dd68"
            ],
            [
                "dbe6929a53aa1a51"
            ]
        ]
    },
    {
        "id": "4a5b4f645b9a0be2",
        "type": "ui_group",
        "name": "Visualisations",
        "tab": "cc1a49b54f71c790",
        "order": 2,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1975459d826d1a70",
        "type": "ui_group",
        "name": "Control outputs",
        "tab": "cc1a49b54f71c790",
        "order": 3,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cc1a49b54f71c790",
        "type": "ui_tab",
        "name": "Distributed control",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
